{"version":3,"file":"devtools.formatters.core.js","sources":["devtools/formatters/core.cljs"],"mappings":";;;;;;;;;;;AAeA,mDAAA,nDAAMyB,8GAAcb;AAApB,AACE,IAAAiD,oBAAK,AAACC,cAAI,AAACC;AAAX,AAAA,GAAAF;AACK,IAAAzD,mBAAI,AAACiD,8CAAYzC;AAAjB,AAAA,oBAAAR;AAAAA;;AAAwB,OAAC4B,gDAAWpB;;;AADzCiD;;;AAGF,wCAAA,xCAAMrC,wFAASZ;AACb,IAAMJ,UAAQ,mLAAA,jKACE,AAACwB,gDAAWpB,QAAO,AAACC,6CAAc,AAACoB,oDAAmBrB,0BACtD,iBAAA,AAAA,GAAA,EAAA,UAAA,TAA4CA,1OAH9D;AAGkB,GAAA,EAAA,WAAA,CAAA0B,gCAAA,AAA4C1B;AAA5C;;AAAA,GAAA,EAAA,AAA4CA;AAA5C,OAAA2B,kCAA4BG,gCAAgB9B;;AAA5C;;;;AAAA,OAAA2B,kCAA4BG,gCAAgB9B;;gBAA5C,IAAA4B,oBAAAC;AAAA,AAAA;sCAFF,/BAEqD,AAACE,wBAAwB/B,yBAC5E,iBAAA,AAAA,GAAA,EAAA,UAAA,TAAoCA;AAApC,GAAA,EAAA,WAAA,CAAA0B,gCAAA,AAAoC1B;AAApC;;AAAA,GAAA,EAAA,AAAoCA;AAApC,OAAA2B,kCAA4BO,2BAAQlC;;AAApC;;;;AAAA,OAAA2B,kCAA4BO,2BAAQlC;;gBAApC,IAAA4B,oBAAAc;AAAA,AAAA;yCAHF,AAIQ,AAACzC,6CAAc,AAACC,0CAASF,zHADY,AAAC2C,2BAA2B3C;;AAHvF,AAKE,OAACsC,6EAA0CtC,MAAMJ;;AAErD,0CAAA,1CAAMG,4FAAWC;AAAjB,AAEE,oBAAI,AAACqC,2DAAkBrC;AAAvB;;AAEE,OAACsB,mBACC,gJAAA,9HACE,AAACF,gDAAWpB,QAAO,EAAA,6DAAA,5DAAO,AAACyB,kDAAmBzB,mCAC9C,iBAAA,AAAA,GAAA,EAAA,UAAA,TAA4CA;AAA5C,GAAA,EAAA,WAAA,CAAA0B,gCAAA,AAA4C1B;AAA5C;;AAAA,GAAA,EAAA,AAA4CA;AAA5C,OAAA2B,kCAA4BG,gCAAgB9B;;AAA5C;;;;AAAA,OAAA2B,kCAA4BG,gCAAgB9B;;gBAA5C,IAAA4B,oBAAAW;AAAA,AAAA;wCAFF,jCAEqD,AAACC,0BAA0BxC,yBAC9E,iBAAA,AAAA,GAAA,EAAA,UAAA,TAAoCA;AAApC,GAAA,EAAA,WAAA,CAAA0B,gCAAA,AAAoC1B;AAApC;;AAAA,GAAA,EAAA,AAAoCA;AAApC,OAAA2B,kCAA4BO,2BAAQlC;;AAApC;;;;AAAA,OAAA2B,kCAA4BO,2BAAQlC;;gBAApC,IAAA4B,oBAAAgB;AAAA,AAAA;2CAHF,AAAA,pCAG6C,AAACC,6BAA6B7C;;;;AAGjF,sCAAA,tCAAMwB,oFAAOxB;AACX,AAACK,qDAAsBC,rDADzB;;AAEE,oBACE,AAACc,gDAAWpB;AAAO,OAACC,6CAAc,AAAC+B,kDAAiBhC;;AADtD,oBAEE,iBAAA,AAAA,GAAA,EAAA,UAAA,TAA4CA;AAA5C,GAAA,EAAA,WAAA,CAAA0B,gCAAA,AAA4C1B;AAA5C;;AAAA,GAAA,EAAA,AAA4CA;AAA5C,OAAA2B,kCAA4BG,gCAAgB9B;;AAA5C;;;;AAAA,OAAA2B,kCAA4BG,gCAAgB9B;;gBAA5C,IAAA4B,oBAAAyB;AAAA,AAAA;;AAAmD,OAACC,sBAAsBtD;;AAF5E,oBAGE,iBAAA,AAAA,GAAA,EAAA,UAAA,TAAoCA;AAApC,GAAA,EAAA,WAAA,CAAA0B,gCAAA,AAAoC1B;AAApC;;AAAA,GAAA,EAAA,AAAoCA;AAApC,OAAA2B,kCAA4BO,2BAAQlC;;AAApC;;;;AAAA,OAAA2B,kCAA4BO,2BAAQlC;;gBAApC,IAAA4B,oBAAAK;AAAA,AAAA;;AAA2C,OAACE,yBAAyBnC;;AAHvE;;;;;AAQF,0CAAA,1CAAMI,4FAAgBU;AAAtB,AACE,kBAAKd,MAAMU;AACT,IAAAK,iCAAUC,rCADZ;AACE,AAAA,AAAUA,sDAAgB,iBAAAxB,mBAAIkB;AAAJ,AAAA,oBAAAlB;AAAAA;;AAAW,OAACyB;;;;AAAtC,IAAA,AACE,QAACH,uCAAAA,8CAAAA,TAAOd,0BAAAA;UADV,AAAA,sDAAAe,tDAAUC;;;AAGd,AAAKR,6CAAY,AAACJ,wCAAeS;AACjC,AAAKF,kCAAO,AAACP,wCAAeQ;AAC5B,AAAKT,oCAAS,AAACC,wCAAeL;AAC9B,AAAKwB,gCAAK,AAACnB,wCAAeoB;AAI1B,qDAAA,rDAAM3B,kHAA2BC;AAAjC,AACE;mCAAOsC;AACL,IAAA,JADF,IAEI,OAACmB,8CAAMzD,EAAEsC;gBADX,QAAA9C,JAEkBD;AACd,uIAAA,vIAACD,mFAAgCC,nFAHrC;;AAAA;;;IADK+C;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAOT,0CAAA,1CAAMW,4FAAgBjC,OAAOpB,gBAAgByB;AAA7C,AAAA;AAKE,IAAMiC,UAAQ,WAAKpD,MAAMU;AACT,IAAMnB,cAAY,iBAAAC,mBAAI,AAACC,oBAAKC,1EAD9B;AACoB,AAAA,oBAAAF;AAAAA;;AAA2BG;;;IACvCuB,eAAa,iBAAA1B,mBAAI,AAACC,oBAAK0B;AAAV,AAAA,oBAAA3B;AAAAA;;AAA4BG;;;IACzCc,qBAAmB,CAAClB,4CAAAA,mDAAAA,TAAYS,+BAAAA;IAChCO,SAAO,6aAAA,3ZAAI,CAACC,2EAAAA,sGAAAA,7BAAYC,kFAAAA,/DAAmBC,kFAAAA,UAClC,CAACI,uCAAAA,kEAAAA,7BAAOL,8CAAAA,3BAAmBC,8CAAAA;AAJ1C,AAKE,QAACQ,6CAAAA,qDAAAA,VAAaX,iCAAAA;;AANhC,AAOE,OAACV,mDAA0BuD;;AAE/B,AAAKN,2CAAgB,wEAAA,kFAAA,1JAACC,wCAAepC;AACrC,AAAKqC,6CAAkB,0EAAA,qFAAA,/JAACD,wCAAe5C;AACvC,AAAKqD,yCAAc,sEAAA,6EAAA,nJAACT,wCAAexB","names":["devtools.reporter.report_internal_error_BANG_.cljs$core$IFn$_invoke$arity$variadic","e","e29869","pre-handler","or__3922__auto__","devtools.prefs/pref","pre-handler-key","cljs.core/identity","json-ml","devtools.formatters.core/wrap-with-exception-guard","f","devtools.formatters.core/has-body*","value","devtools.formatters.templating/render-markup","devtools.formatters.markup/<header>","devtools.formatters.core/has-body","devtools.formatters.core/config-wrapper","devtools.formatters.state/update-current-state!","devtools.formatters.state/reset-depth-limits","result","devtools.formatters.core/want-value?","preprocessed-value","config","devtools.formatters.core/header","devtools.formatters.core/header*","devtools.formatters.core/want-value?*","raw-fn","*current-state*29868","devtools.formatters.state/*current-state*","devtools.formatters.state/get-default-state","post-handler","post-handler-key","devtools.formatters.templating/surrogate?","devtools.formatters.markup/<surrogate-header>","cljs.core/boolean","devtools.formatters.core/body","devtools.formatters.core/body*","devtools.formatters.templating/get-surrogate-body","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","_e__27696__auto__","e29856","devtools.format/IDevtoolsFormat","devtools.format/-header","devtools.formatters.markup/<surrogate-body>","e29866","devtools.protocols/IFormat","devtools.protocols/-body","args","devtools.formatters.budgeting/was-over-budget?!","devtools.formatters.budgeting/alter-json-ml-to-fit-in-remaining-budget!","e29860","devtools.format/-has-body","devtools.formatters.helpers/cljs-value?","e29858","devtools.protocols/-header","e29862","devtools.protocols/-has-body","devtools.formatters.core/header-api-call","devtools.formatters.core/build-api-call","devtools.formatters.core/has-body-api-call","and__3911__auto__","cljs.core/not","devtools.formatters.state/prevent-recursion?","handler","e29864","devtools.format/-body","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","devtools.formatters.core/body-api-call"],"sourcesContent":["(ns devtools.formatters.core\n  (:require-macros [devtools.oops :refer [safe-call]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.format :refer [IDevtoolsFormat]]\n            [devtools.protocols :refer [IFormat]]\n            [devtools.reporter :as reporter]\n            [devtools.formatters.templating :refer [surrogate? render-markup get-surrogate-body]]\n            [devtools.formatters.helpers :refer [cljs-value?]]\n            [devtools.formatters.state :refer [prevent-recursion? *current-state* get-default-state update-current-state!\n                                               reset-depth-limits]]\n            [devtools.formatters.markup :refer [<header> <surrogate-header> <surrogate-body>]]\n            [devtools.formatters.budgeting :refer [was-over-budget?! alter-json-ml-to-fit-in-remaining-budget!]]))\n\n; -- RAW API ----------------------------------------------------------------------------------------------------------------\n\n(defn want-value?* [value]\n  (and (not (prevent-recursion?))\n       (or (cljs-value? value) (surrogate? value))))\n\n(defn header* [value]\n  (let [json-ml (cond\n                  (surrogate? value) (render-markup (<surrogate-header> value))\n                  (safe-call satisfies? false IDevtoolsFormat value) (devtools.format/-header value)\n                  (safe-call satisfies? false IFormat value) (devtools.protocols/-header value)\n                  :else (render-markup (<header> value)))]\n    (alter-json-ml-to-fit-in-remaining-budget! value json-ml)))                                                               ; see issue #22\n\n(defn has-body* [value]\n  ; note: body is emulated using surrogate references\n  (if (was-over-budget?! value)                                                                                               ; see issue #22\n    false                                                                                                                     ; see alter-json-ml-to-fit-in-remaining-budget!, in case we didn't fit into budget, a header-expander placeholder with body was added in place\n    (boolean\n      (cond\n        (surrogate? value) (some? (get-surrogate-body value))\n        (safe-call satisfies? false IDevtoolsFormat value) (devtools.format/-has-body value)\n        (safe-call satisfies? false IFormat value) (devtools.protocols/-has-body value)\n        :else false))))\n\n(defn body* [value]\n  (update-current-state! reset-depth-limits)\n  (cond\n    (surrogate? value) (render-markup (<surrogate-body> value))\n    (safe-call satisfies? false IDevtoolsFormat value) (devtools.format/-body value)\n    (safe-call satisfies? false IFormat value) (devtools.protocols/-body value)))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n; config-aware RAW API, see state management documentation state.cljs\n\n(defn config-wrapper [raw-fn]\n  (fn [value config]\n    (binding [*current-state* (or config (get-default-state))]\n      (raw-fn value))))\n\n(def want-value? (config-wrapper want-value?*))\n(def header (config-wrapper header*))\n(def has-body (config-wrapper has-body*))\n(def body (config-wrapper body*))\n\n; -- API CALLS --------------------------------------------------------------------------------------------------------------\n\n(defn wrap-with-exception-guard [f]\n  (fn [& args]\n    (try\n      (apply f args)\n      (catch :default e\n        (reporter/report-internal-error! e \"an exception was raised during value formatting\")\n        nil))))\n\n(defn build-api-call [raw-fn pre-handler-key post-handler-key]\n  \"Wraps raw API call in a function which calls pre-handler and post-handler.\n\n   pre-handler gets a chance to pre-process value before it is passed to cljs-devtools\n   post-handler gets a chance to post-process value returned by cljs-devtools.\"\n  (let [handler (fn [value config]\n                  (let [pre-handler (or (pref pre-handler-key) identity)\n                        post-handler (or (pref post-handler-key) identity)\n                        preprocessed-value (pre-handler value)\n                        result (if (want-value? preprocessed-value config)\n                                 (raw-fn preprocessed-value config))]\n                    (post-handler result)))]\n    (wrap-with-exception-guard handler)))\n\n(def header-api-call (build-api-call header :header-pre-handler :header-post-handler))\n(def has-body-api-call (build-api-call has-body :has-body-pre-handler :has-body-post-handler))\n(def body-api-call (build-api-call body :body-pre-handler :body-post-handler))\n"]}