{"version":3,"file":"reagent.impl.component.js","sources":["reagent/impl/component.cljs"],"mappings":"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","names":["G__36893","instance","or__3922__auto__","G__36900","c","owner","G__36908","elem","ok","reagent.impl.component/cache-react-class","constructor","G__36874","res","path","name","reagent.impl.component/fiber-component-path","fiber","f","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","render-fun","G__36906","reagent.impl.util/fun-name","G__36911","renders","cljs.core/select-keys","fmap","reagent.impl.component/state-atom","cljs.core/reset!","reagent.impl.component/obligatory","k","ks","i","reagent.impl.component/add-obligatory","fun-map","G__36872","reagent.impl.component/react-class?","reagent.impl.component/props-argv","nextprops","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","v","reagent.impl.component/extract-props","G__36892","body","old-argv","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/get-argv","reagent.impl.component/wrap-render","reagent.impl.component/dash-to-camel","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-camel","reagent.impl.component/shallow-obj-to-map","p","G__36909","sa","this","G__36876","reagent.impl.component/as-element","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","args","reagent.impl.batching/mark-rendered","cljs.core/count","reagent.impl.component/cljsify","reagent.impl.component/create-class","reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","G__36875","n","withrender","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","spec","rat","cljs.core.into.cljs$core$IFn$_invoke$arity$2","m","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","reagent.impl.component/comp-name","reagent.impl.component/wrap-funs","reagent.impl.util/*non-reactive*","reagent.impl.component/reagent-class?","o","reagent.impl.component/get-children","G__36883","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","temp__5459__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__36895","reagent.impl.component/*current-component*","first-child","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","wrap","reagent.impl.component/custom-wrapper","key","cljs.core/empty?","G__36891","G__36887","reagent.impl.component/camelify-map-keys","reagent.impl.component/fn-to-class","G__36904","reagent.impl.component/as-class","comp","G__36894","cljs.core/name","reagent.impl.component/reactify-component","_","G__36902","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","oldprops","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/meta","noargv","new-argv","a","G__36884","G__36910","reagent.impl.component/component-path","reagent.ratom/dispose!","reagent.impl.batching/next-mount-count","cljs.core/fn?","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","legacy-render","reagent.impl.component/extract-children","reagent.impl.component/static-fns","reagent.impl.component/reagent-component?","cached-class","reagent.impl.component/cached-react-class","tag","G__36905","cljs.core/reduce-kv","cljs.core/vector?","len","parent","reagent.ratom/run-in-reaction","reagent.impl.component/do-render","cljs.core/vals","cljs.core/first","error","info","*current-component*36882","G__36898","reagent.impl.component/get-wrapper","reagent.impl.component/map-to-js","G__36870","js/module$node_modules$react$index.Children.toArray","cljs.core/map?","cljs.core/js-keys","temp__5455__auto__","G__36897","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","nextstate","js/module$node_modules$create_react_class$index","and__3911__auto__","cljs.core/Keyword","reagent.impl.util/*always-update*","reagent.impl.component/get-props","reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns reagent.impl.component\n  (:require [create-react-class :as create-react-class]\n            [react :as react]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (not= old-argv new-argv))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       create-react-class))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     ($ :type)\n                     ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  ;; Try both original name (for UMD foreign-lib) and manged name (property access, for Closure optimized React)\n  (if-let [fiber (or (some-> c ($ :_reactInternalFiber))\n                     (some-> c (.-_reactInternalFiber)))]\n    (fiber-component-path fiber)\n    (let [instance (or (some-> c ($ :_reactInternalInstance))\n                       (some-> c (.-_reactInternalInstance))\n                       c)\n          elem (or (some-> instance ($ :_currentElement))\n                   (some-> instance (.-_currentElement)))\n          name (some-> elem\n                       ($ :type)\n                       ($ :displayName))\n          owner (or (some-> elem ($ :_owner))\n                    (some-> elem (.-_owner)))\n          path (some-> owner\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"]}