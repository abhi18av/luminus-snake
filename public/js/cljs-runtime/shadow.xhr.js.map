{"version":3,"file":"shadow.xhr.js","sources":["shadow/xhr.cljs"],"mappings":"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","names":["G__36096","xhr","shadow.xhr/register-transform","content-type","transform-fn","sep","ct","var_args","G__36063","shadow.xhr/request","js/Error","cljs.core/identity","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.xhr/content-transforms","body?","e","req","js/goog.result.SimpleResult.fromPromise","G__36023","shadow.xhr/chan","p__36024","map__36025","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","status","G__36075","G__36076","G__36077","G__36078","goog.labs.net.xhr/send","cljs.core/name","method","shadow.xhr.chan.cljs$core$IFn$_invoke$arity$4","url","data","shadow.xhr/edn-transform","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","events","cljs.core/contains?","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.dom.on.cljs$core$IFn$_invoke$arity$3","shadow.xhr/event-handler","shadow.xhr/result-value","res","clojure.string/lower-case","vec__36013","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","params","input","shadow.xhr/result-success?","shadow.xhr/make-url","options","and__3911__auto__","upload","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","body","G__36009","body-only","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","event-type","shadow.xhr/e->data","shadow.xhr.request.cljs$core$IFn$_invoke$arity$4","G__36041","G__36042","transform","obj","shadow.xhr/as-url","shadow.xhr/result-chain","handler","goog.result/transform","shadow.xhr/auto-transform","shadow.xhr/make-request-options","file","c","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","shadow.xhr/result-wait-on-success","callback","goog.result/successfulResult","value","cljs.core.async/close!","result-chan","shadow.xhr/result-error","goog.result/waitOnSuccess","cljs.core/assoc-in","temp__5455__auto__","target","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","ev-id","shadow.xhr/json-transform","error-handler","cljs.core/map?","cljs.core/second","shadow.xhr/goog-keys","ev-handler","vec__36072","js/goog.result.Result.State.SUCCESS","goog.result/waitOnError","shadow.xhr/transform-request-body","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","vec__36031","js/XMLHttpRequest","shadow.xhr/request-error?","cljs.core/vector?","goog.result/combine","results","temp__5457__auto__","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","shadow.xhr/upload","seq36081","G__36082","cljs.core/next","G__36083","self__4486__auto__","k","v","cljs.core/clj->js","goog.result/chain","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core/count","shadow.xhr/request-ok?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","shadow.xhr/result-immediate","shadow.xhr/result-combine","seq35964","self__4487__auto__","cljs.core/seq","seq__35970","chunk__35971","count__35972","i__35973","vec__35974","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__35977","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/JSON","G__36010","G__36011","goog.uri.utils/appendParamsFromMap","seq__36084","chunk__36086","count__36087","i__36088","vec__36090","vec__36093","cljs.core.partition.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns shadow.xhr\n  \"FIXME: rewrite to using promises, since closure is deprecating result\"\n  (:require [goog.result :as gresult]\n            goog.result.SimpleResult\n            [goog.labs.net.xhr :as gxhr]\n            [cljs.reader :as cr]\n            [goog.uri.utils :as gutils]\n            [goog.json :as gjson]\n            [shadow.object :as so]\n            [shadow.dom :as dom]\n            [cljs.core.async :as async]\n            [clojure.string :as str]\n            [shadow.util :as util :refer (log)]\n            ))\n\n(defn result-chain [res handler]\n  (gresult/chain res handler))\n\n(defn result-combine [& results]\n  (apply gresult/combine results))\n\n(defn result-wait-on-success [res callback]\n  (gresult/waitOnSuccess res callback))\n\n(defn result-success? [res]\n  (= js/goog.result.Result.State.SUCCESS (.getState res)))\n\n(defn result-value [res]\n  (.getValue res))\n\n(defn result-immediate [value]\n  (gresult/successfulResult value))\n\n(defn result-error [res callback]\n  (gresult/waitOnError res callback))\n\n;; FIXME: this whole module is a mess ...\n\n(defn- edn-transform [body]\n  (cr/read-string body))\n\n(defn- json-transform [body]\n  (js->clj (.parse js/JSON body)))\n\n(def goog-keys {:timeout \"timeoutMs\"\n                :with-credentials \"withCredentials\"\n                :headers \"headers\"\n                :mime-type \"mimeType\"\n                })\n\n(defn make-request-options [options]\n  (let [obj (js-obj)]\n    (doseq [[k v] options]\n      (aset obj (get goog-keys k) (clj->js v)))\n    obj\n    ))\n\n(def content-transforms\n  (atom\n    {\"text/edn\" edn-transform\n     \"application/edn\" edn-transform\n     \"application/json\" json-transform\n     \"text/html\" identity\n     \"text/plain\" identity}))\n\n(defn register-transform [content-type transform-fn]\n  (swap! content-transforms assoc content-type transform-fn))\n\n(defn auto-transform [req]\n  (let [content-type (let [ct (str/lower-case (.getResponseHeader req \"Content-Type\"))\n                           sep (.indexOf ct \";\")]\n                       (if (not= -1 sep)\n                         (.substring ct 0 sep)\n                         ct))\n        transform-fn (get @content-transforms content-type)]\n    (if (nil? transform-fn)\n      (throw (ex-info \"unsupported content-type\" {:req req :content-type content-type}))\n      (transform-fn (.-responseText req)))))\n\n(defn make-url [url params]\n  (gutils/appendParamsFromMap url (clj->js params)))\n\n(defn transform-request-body [data]\n  (cond\n    (string? data)\n    [\"text/plain; charset=utf-8\" data]\n    (satisfies? IPrintWithWriter data)\n    [\"text/edn; charset=utf-8\" (pr-str data)]\n    :default\n    [\"application/octet-stream\" data]\n    ))\n\n(defn as-url [input]\n  (cond\n    (string? input)\n    input\n\n    (and (vector? input)\n         (= 2 (count input))\n         (string? (first input))\n         (map? (second input)))\n    (let [[url params] input]\n      (make-url url params))\n\n    :else\n    (throw (ex-info \"doesnt look like an url\" {:input input}))\n    ))\n\n(defn e->data [e]\n  e)\n\n(defn event-handler [req events event-type]\n  (fn [e]\n    (cond\n      (map? events)\n      (when-let [c (get events event-type)]\n        (async/put! c [req (e->data e)]))\n\n      (not (nil? events))\n      (async/put! events [event-type req (e->data e)])\n\n      :else\n      nil)))\n\n(defn request-ok? [status]\n  (= 200 status))\n\n(defn request-error? [status]\n  (>= status 400))\n\n(defn chan\n  \"creates a channel and performs xhr request like (chan :GET \\\"/something\\\")\n\n   accepts url as string or [url params]\n\n   this channel will receive one message [status body req] on load\n   loadend will close the result channel, so you will get nil results on request errors/timeouts\n\n   use options hash to pass in extra channels\n\n   (chan :POST \\\"/something\\\" some-data {:events chan-or-map\n                                         :upload chan-or-map})\n\n   when given a chan that channels receives messages in form of [event-type event-data req]\n   when given a map a channel is expected for each eventtype and will receive [event-data req]\n   {:timeout some-chan}, if no channel for a given event is present, no message is sent\n\n   event types are :loadstart :progress :abort :error :timeout :loadend :load (see xhr spec)\n   only exception is that status >= 500 does not return a result and produces an error event instead\"\n\n  ([method url]\n   (chan method url nil {}))\n  ([method url data]\n   (chan method url data {}))\n  ([method url data {:keys [events\n                            upload\n                            body-only]\n                     :as options}]\n   (let [req (js/XMLHttpRequest.)\n         body? (not= :GET method)\n         [content-type body] (if body?\n                               (transform-request-body data)\n                               [nil nil])\n         result-chan (async/chan 1)]\n\n     (when (and body? upload)\n       (dom/on (.-upload req) :loadstart (event-handler req upload :loadstart))\n       (dom/on (.-upload req) :progress (event-handler req upload :progress))\n       (dom/on (.-upload req) :abort (event-handler req upload :abort))\n       (dom/on (.-upload req) :error (event-handler req upload :error))\n       (dom/on (.-upload req) :timeout (event-handler req upload :timeout))\n       (dom/on (.-upload req) :loadend (event-handler req upload :loadend))\n       (dom/on (.-upload req) :load (event-handler req upload :loadend)))\n\n     (dom/on req :loadstart (event-handler req events :loadstart))\n     (dom/on req :progress (event-handler req events :progress))\n     (dom/on req :abort (event-handler req events :abort))\n     (dom/on req :timeout (event-handler req events :timeout))\n\n     (dom/on req :loadend (let [callback (event-handler req events :loadend)]\n                            (fn [e]\n                              (callback e)\n                              (async/close! result-chan))))\n\n     (let [error-handler (event-handler req events :error)]\n       (dom/on req :error error-handler)\n\n       (dom/on req :load (let [callback (event-handler req events :load)]\n                           (fn [e]\n                             (let [status (.-status req)\n                                   body\n                                   (if-let [transform (:transform options)]\n                                     (transform (.-responseText req) req)\n                                     (auto-transform req))]\n                               (if (request-error? status)\n                                 (error-handler e)\n                                 (do (callback e)\n                                     (if body-only\n                                       (async/put! result-chan body)\n                                       (async/put! result-chan [status body req])))))))))\n\n     (.open req (name method) (as-url url) true)\n\n     ;; must set after open\n     ;; FIXME: bad for CORS! but who uses http auth for anything serious?\n     (set! (.-responseType req) \"text\")\n     (set! (.-withCredentials req) (not (false? (:with-credentials options))))\n\n     (when body?\n       (.setRequestHeader req \"Content-Type\" content-type))\n\n     (if body?\n       (.send req body)\n       (.send req))\n\n     result-chan\n     )))\n\n(defn request\n  ([method url]\n   (request method url nil {}))\n  ([method url data]\n   (request method url data {}))\n  ([method url data options]\n   (when (and (not (contains? #{:GET :DELETE} method)) (nil? data))\n     (throw (ex-info \"request needs data\" {:method method :url url :data data :options options})))\n\n   (let [body? (not (or (= :GET method) (nil? data)))\n         [content-type body] (transform-request-body data)\n         req (gxhr/send (name method)\n               (if (and (= :GET method) data)\n                 (make-url url data)\n                 url)\n               (when body?\n                 body)\n               (make-request-options\n                 (if body?\n                   (assoc-in options [:headers \"Content-Type\"] content-type)\n                   options))\n               )\n         req (js/goog.result.SimpleResult.fromPromise req)\n         ]\n     (gresult/transform req auto-transform))))\n\n(defn upload [url file & events]\n  (let [xhr (js/XMLHttpRequest.)]\n    (doseq [[ev-id ev-handler] (partition 2 events)\n            :let [target (if (= :progress ev-id) (aget xhr \"upload\") xhr)]]\n      (.addEventListener target (name ev-id) ev-handler))\n    (doto xhr\n      (.open \"PUT\" url)\n      (.send file))))\n"]}