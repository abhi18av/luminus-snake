{"version":3,"file":"reagent.impl.template.js","sources":["reagent/impl/template.cljs"],"mappings":"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","names":["cljs.core/fn?","x","reagent.impl.template/reagent-input-class","cljs.core/with-meta","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","n","pos","reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","tag","reagent.impl.template/input-unmount","this","reagent.impl.template/get-key","id","cljs.core/coll?","cljs.core/clj->js","reagent.impl.template/input-handle-change","on-change","e","G__36912","o","cljs.core/reduce-kv","a","k","v","dom-value","class","vec__36960","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","ctx","jsprops","clojure.string.join.cljs$core$IFn$_invoke$arity$2","temp__5461__auto__","key","reagent.impl.template/key-from-vec","G__36949","reagent.impl.template/has-selection-api?","first-child","first","hasprops","reagent.impl.template/as-element","argv","input-type","reagent.impl.batching/do-after-render","reagent.impl.template/input-component-set-value","reagent.impl.template/make-element","comp","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","args","node","new-cursor-offset","js/module$node_modules$react$index.Fragment","p","i","cljs.core/map?","reagent.impl.template/kv-conv","reagent.impl.template/named?","reagent.impl.template/oset","props","reagent.impl.template/str-coll","coll","reagent.impl.util/dash-to-camel","reagent.impl.component/create-class","reagent.impl.template/input-spec","reagent.impl.template/custom-kv-conv","n__4376__auto__","G__36941","reagent.impl.template/reagent-input","on-write","rendered-value","reagent.impl.template/oget","existing-offset-from-end","cljs.core/count","node-value","reagent.impl.template/expand-seq-check","reagent.impl.component/*current-component*","G__36921","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","reagent.impl.template/try-get-key","cljs.core/name","G__36940","G__36964","G__36965","G__36966","js/module$node_modules$react$index.createElement","reagent.impl.template/set-id-class","id-class","clojure.walk/prewalk","c","js/Error","reagent.impl.template/find-dom-node","G__36920","reagent.impl.template/cached-prop-name","value","temp__5459__auto__","k'","reagent.impl.template/cache-get","reagent.impl.template/prop-name-cache","reagent.impl.template/native-element","res","p__36925","map__36926","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/input-node-set-value","reagent.impl.template/re-tag","hiccup-tag","cljs.core/next","vec__36932","cljs.core/re-matches","reagent.impl.template/js-val?","reagent.impl.component/as-class","reagent.impl.template/valid-tag?","reagent.impl.template/stringify-class","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/reag-element","reagent.impl.template/tag-name-cache","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","reagent.impl.template/hiccup-err","seq36944","G__36945","cljs.core/first","self__4486__auto__","msg","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","s","cljs.core/meta","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","G__36963","reagent.impl.template/convert-prop-value","reagent.impl.component/comp-name","cljs.core/str","reagent.impl.util/fun-name","reagent.impl.template/expand-seq-dev","reagent.impl.template/hiccup-tag?","parsed","G__36916","reagent.impl.template/cached-custom-prop-name","G__36929","p1__36928#","component","reagent.impl.template/vec-to-elem","reagent.impl.template/these-inputs-have-selection-api","reagent.impl.template/NativeWrapper","val","and__3911__auto__","reagent.impl.template/expand-seq","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/as-element","reagent.impl.template/convert-props","reagent.impl.template/parse-tag","cljs.core/contains?","reagent.impl.template/input-render-setup","cljs.core/Keyword","cljs.core/ifn?","reagent.impl.template/input-component?","G__36942","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/keyword-identical?","reagent.impl.template/custom-prop-name-cache","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","reagent.impl.template/->NativeWrapper","goog/typeOf","derefed","reagent.ratom/check-derefs","reagent.impl.template/cached-parse","reagent.impl.template/adapt-react-class","cljs.core/seq?","clojure.string/replace","reagent.impl.template/fragment-element","cljs.core/Symbol","old-class","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__36922","map__36923","cljs.core/vector?","G__36930","e36935","js/document","cljs.core.subs.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [reagent.impl.util :as util :refer [is-client]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n(declare as-element)\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (aset (cached-custom-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id ($ id-class :id)\n        class ($ id-class :class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      (assoc :class (let [old-class (:class props)]\n                      (if (nil? old-class) class (str class \" \" old-class)))))))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (filter identity)\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (let [props (-> props\n                  stringify-class\n                  (set-id-class id-class))]\n    (if ($ id-class :custom)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Specialization for input components\n\n;; This gets set from reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          ;; Default to the root node within this component\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [this jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v ($ jsprops :value)\n          value (if (nil? v) \"\" v)\n          on-change ($ jsprops :onChange)]\n      (when-not ($ this :cljsInputLive)\n        ;; set initial value\n        ($! this :cljsInputLive true)\n        ($! this :cljsDOMValue value))\n      ($! this :cljsRenderedValue value)\n      (js-delete jsprops \"value\")\n      (doto jsprops\n        ($! :defaultValue value)\n        ($! :onChange #(input-handle-change this on-change %))))))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js {:name tag\n         :id id\n         :class class\n         ;; Custom element names must contain hyphen\n         ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n         :custom (not= -1 (.indexOf tag \"-\"))}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn fragment-element [argv]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (convert-prop-value (if hasprops props))\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (oset jsprops \"key\" key))\n    (make-element argv react/Fragment jsprops first-child)))\n\n(defn adapt-react-class\n  [c]\n  (doto (->NativeWrapper)\n    ($! :name c)\n    ($! :id nil)\n    ($! :class nil)))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (input-component? comp)\n        (-> [(reagent-input) argv comp jsprops first-child]\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v)\n\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (assert (or (string? comp) (fn? comp))\n                      (hiccup-err v \"Expected React component in\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          ;; Apply metadata (e.g. :key) to the outermost element.\n          ;; Metadata is probably used only with sequeneces, and in that case\n          ;; only the key of the outermost element matters.\n          (recur (with-meta [(subs n 0 pos)\n                             (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                            (meta v)))))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"]}