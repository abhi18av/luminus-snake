{"version":3,"file":"devtools.hints.js","sources":["devtools/hints.cljs"],"mappings":"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","names":["devtools.hints/global-error-handler","message","url","line","column","error","reader","or__3922__auto__","devtools.prefs/pref","devtools.hints/ajax-reader","devtools.hints/empty-as-nil","xhr","content","devtools.hints/install-type-error-enhancer","prototype","js/TypeError","js/XMLHttpRequest","devtools.hints/mark-null-call-site-location","file","line-number","devtools.hints/*original-type-error-prototype-to-string*","cljs.core/count","min-length","lines","devtools.hints/error-object-sense","self","devtools.hints/type-error-to-string","str","devtools.hints/*installed*","new-content","prev-line","top-item","cljs.core/second","stack-trace","devtools.hints/extend-content","marked-line","map__27767","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","native-stack-trace","temp__5455__auto__","cljs.core/deref","val","devtools.hints/processed-errors","js/WeakSet","seen-errors","prev-line-number","devtools.hints/parse-stacktrace","devtools.hints/installed?","cljs.core/volatile!","temp__5457__auto__","sense","devtools.hints/make-sense-of-the-error","cljs.core/empty?","devtools.hints/mark-call-closed-at-column","_e","devtools.hints/get-line","G__27757","G__27758","G__27759","G__27760","cljs.stacktrace/parse-stacktrace","devtools.hints/*original-global-error-handler*","devtools.context/get-root","res","js/Error","devtools.hints/set-processed-errors!","devtools.hints/retrieve-javascript-source","where","e27766","devtools.hints/uninstall!","devtools.hints/install!","devtools.hints/get-processed-errors!","prefix","n","postfix","cljs.core/vreset!","devtools.context/get-console","cljs.core/not","cljs.core/re-matches","devtools.hints/available?"],"sourcesContent":["(ns devtools.hints\n  (:require-macros [devtools.compiler :refer [check-compiler-options!]]\n                   [devtools.oops :refer [unchecked-aget]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.context :as context]\n            [cljs.stacktrace :as stacktrace]))\n\n; cljs.stacktrace does not play well in :advanced mode optimizations, see https://github.com/binaryage/cljs-devtools/issues/37\n(check-compiler-options!)\n\n(defn ^:dynamic available? []\n  true)\n\n; Question: How much time have you lost staring at \"Cannot read property 'call' of null\" kind of errors?\n;\n; ---------------------------------------------------------------------------------------------------------------------------\n;\n; The idea is to try enhance error object's .stack and .message fields with additional info about\n; the call site causing null type error. With optimizations :none the name of the null call site can be seen.\n;\n; The enhancing handler function tries to:\n; 1) parse error's stack trace.\n; 2) look original javascript source file up (via sync AJAX fetch by default).\n; 3) locate reported line and column.\n; 4) presents problematic line with a column hint as addition to .stack or .message strings.\n\n; Technically the trick here is to override TypeError.prototype.toString\n; and global window.onerror handler to enhance uncaught errors.\n;\n; With that we should handle two situations:\n; 1) either error gets printed (typically in user's catch via console), so patched toString() method gets called.\n; 2) or it is uncaught and our global error handler should take care of possible enhancement\n;    before devtools present it to the user themselves.\n;\n; note: Tested under Chrome only\n\n(def ^:dynamic *installed* false)\n(def ^:dynamic *original-global-error-handler* nil)\n(def ^:dynamic *original-type-error-prototype-to-string* nil)\n\n(def processed-errors (volatile! nil))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn set-processed-errors! [val]\n  (vreset! processed-errors val))\n\n(defn get-processed-errors! []\n  (if-let [val @processed-errors]\n    val\n    (if (exists? js/WeakSet)\n      (set-processed-errors! (js/WeakSet.)))))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn empty-as-nil [str]\n  (if (empty? str) nil str))\n\n(defn ajax-reader [url]\n  (let [xhr (js/XMLHttpRequest.)]\n    (.open xhr \"GET\" url false)\n    (.send xhr)\n    (empty-as-nil (.-responseText xhr))))\n\n(defn retrieve-javascript-source [where]\n  (let [reader (or (pref :file-reader) ajax-reader)]\n    (reader where)))\n\n(defn get-line [lines line-number]\n  (unchecked-aget lines (dec line-number)))                                                                                   ; line numbering is 1-based\n\n(defn extend-content [content lines line-number min-length]\n  (if (or (> (count content) min-length)\n          (not (pos? line-number)))\n    content\n    (let [prev-line-number (dec line-number)\n          prev-line (get-line lines prev-line-number)\n          new-content (str prev-line \"\\n\" content)]\n      (extend-content new-content lines prev-line-number min-length))))\n\n(defn mark-call-closed-at-column [line column]\n  (let [n (dec column)                                                                                                        ; column number is 1-based\n        prefix (.substring line 0 n)\n        postfix (.substring line n)]\n    (str prefix \" <<< \u2622 NULL \u2622 <<< \" postfix)))\n\n(defn mark-null-call-site-location [file line-number column]\n  (let [content (retrieve-javascript-source file)\n        lines (.split content \"\\n\")\n        line (get-line lines line-number)\n        marked-line (mark-call-closed-at-column line column)\n        min-length (or (pref :sanity-hint-min-length) 128)]\n    (extend-content marked-line lines line-number min-length)))\n\n(defn make-sense-of-the-error [message file line-number column]\n  (cond\n    (re-matches #\"Cannot read property 'call' of.*\" message) (mark-null-call-site-location file line-number column)\n    :else nil))\n\n(defn parse-stacktrace [native-stack-trace]\n  (stacktrace/parse-stacktrace {} native-stack-trace {:ua-product :chrome} {:asset-root \"\"}))\n\n(defn error-object-sense [error]\n  (try\n    (let [native-stack-trace (.-stack error)\n          stack-trace (parse-stacktrace native-stack-trace)\n          top-item (second stack-trace)                                                                                       ; first line is just an error message\n          {:keys [file line column]} top-item]\n      (make-sense-of-the-error (.-message error) file line column))\n    (catch :default _e\n      ; silently fail in case of troubles parsing stack trace\n      false)))\n\n(defn type-error-to-string [self]\n  (if-let [seen-errors (get-processed-errors!)]\n    (when-not (.has seen-errors self)\n      (.add seen-errors self)\n      (when-let [sense (error-object-sense self)]\n        (set! (.-message self) (str (.-message self) \", a sanity hint:\\n\" sense)))))                                          ; this is dirty, patch message field before it gets used\n  (.call *original-type-error-prototype-to-string* self))\n\n(defn global-error-handler [message url line column error]\n  (let [res (if *original-global-error-handler*\n              (*original-global-error-handler* message url line column error))]\n    (if-not res\n      (when-let [sense (error-object-sense error)]\n        (.info (context/get-console) \"A sanity hint for incoming uncaught error:\\n\" sense)\n        false)\n      true)))\n\n(defn install-type-error-enhancer []\n  (set! *original-global-error-handler* (.-onerror (context/get-root)))\n  (set! (.-onerror (context/get-root)) global-error-handler)\n  (let [prototype (.-prototype js/TypeError)]\n    (set! *original-type-error-prototype-to-string* (.-toString prototype))\n    (set! (.-toString prototype) #(this-as self (type-error-to-string self)))))                                               ; work around http://dev.clojure.org/jira/browse/CLJS-1545\n\n; -- installation -----------------------------------------------------------------------------------------------------------\n\n(defn installed? []\n  *installed*)\n\n(defn install! []\n  (when-not *installed*\n    (set! *installed* true)\n    (install-type-error-enhancer)\n    true))\n\n(defn uninstall! []\n  (when *installed*\n    (set! *installed* false)\n    (assert *original-type-error-prototype-to-string*)\n    (set! (.-onerror (context/get-root)) *original-global-error-handler*)\n    (let [prototype (.-prototype js/TypeError)]\n      (set! (.-toString prototype) *original-type-error-prototype-to-string*))))\n"]}