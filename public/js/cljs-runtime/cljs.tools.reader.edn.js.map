{"version":3,"file":"cljs.tools.reader.edn.js","sources":["cljs/tools/reader/edn.cljs"],"mappings":"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","names":["cljs.tools.reader.impl.commons/read-comment","cljs.tools.reader.impl.errors/throw-invalid","reader","token","res","f","ch","opts","cljs.tools.reader.reader-types/get-file-name","cljs.core/PROTOCOL_SENTINEL","o","cljs.core/count","the-set","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","coll","cljs.tools.reader.reader-types/read-char","rdr","m","cljs.tools.reader.impl.utils/desugar-meta","cljs.tools.reader.edn/read","dm","cljs.tools.reader.edn/escape-char","sb","cljs.tools.reader.reader-types/peek-char","G__31098","cljs.tools.reader.impl.errors/throw-eof-at-dispatch","cljs.tools.reader.edn/read-delimited","_","name","s","cljs.tools.reader.reader-types/indexing-reader?","object","cljs.tools.reader.edn.read_unicode_char.cljs$core$IFn$_invoke$arity$5","cljs.core/set","temp__5455__auto__","ns","G__31143","cljs.tools.reader.impl.commons/parse-symbol","cljs.tools.reader.impl.utils/second'","token-len","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$4","eof-error?","eof","js/parseInt","uc","cljs.tools.reader.reader-types/unread","cljs.tools.reader.edn/read-unmatched-delimiter","l","offset","length","cljs.tools.reader.impl.errors/throw-bad-octal-number","cljs.tools.reader.edn/read-set","obj","cljs.core/PersistentHashMap","cljs.core/to-array","the-map","cljs.tools.reader.edn/not-constituent?","mret","macrofn","cljs.tools.reader.impl.errors/throw-ns-map-no-map","cljs.tools.reader.edn/dispatch-macros","cljs.tools.reader.impl.utils/ex-info?","e","i","cljs.tools.reader.edn/read-meta","cljs.tools.reader.edn/read-symbolic-value","initch","cljs.tools.reader.edn.read_token.cljs$core$IFn$_invoke$arity$3","kind","delim","base","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.errors/throw-invalid-unicode-literal","cljs.core/not","len","js/Error","cljs.tools.reader.edn/read-string*","cljs.tools.reader.impl.errors/throw-unsupported-character","cljs.tools.reader.impl.errors/throw-dup-keys","cljs.core/PersistentArrayMap","exact?","ks","cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.utils/whitespace?","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.edn/read-char*","keys","cljs.tools.reader.impl.errors/throw-bad-metadata-target","d","ic","cljs.tools.reader.edn/lower-limit","a","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.edn/read-dispatch","cljs.tools.reader.edn/read-map","goog/string.StringBuffer","cljs.tools.reader/char-code","c","cljs.tools.reader.edn.read_unicode_char.cljs$core$IFn$_invoke$arity$4","cljs.tools.reader.impl.commons/throwing-reader","sym","cljs.tools.reader.edn/macros","G__31147","cljs.tools.reader.edn/upper-limit","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","and__3911__auto__","cljs.tools.reader.impl.commons/number-literal?","cljs.tools.reader.edn/read-number","cljs.core/contains?","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$2","js/Number.NEGATIVE_INFINITY","cljs.tools.reader.edn/read-tagged","G__31142","the-list","or__3922__auto__","cljs.tools.reader.impl.commons/match-number","items","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","p","e31154","cljs.tools.reader.impl.utils/namespace-keys","js/String.fromCharCode","tag","cljs.tools.reader.impl.utils/char","cljs.tools.reader.edn/read-discard","cljs.tools.reader.edn/read-namespaced-map","cljs.core/ex-data","cljs.tools.reader.impl.errors/throw-single-colon","cljs.core/transient","cljs.tools.reader.impl.errors/throw-bad-escape-char","cljs.core/meta","cljs.core/with-meta","G__31127","cljs.tools.reader.impl.errors/throw-bad-reader-tag","G__31144","var_args","G__31097","cljs.tools.reader.edn/read-token","cljs.tools.reader.edn/read-vector","cljs.tools.reader.impl.errors/throw-odd-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/Symbol","map-count","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit","G__31132","cljs.tools.reader.edn.read_token.cljs$core$IFn$_invoke$arity$4","cljs.tools.reader.impl.errors/throw-bad-char","cljs.tools.reader.impl.errors/throw-invalid-octal-len","cljs.tools.reader/default-data-readers","validate-leading?","cljs.tools.reader.edn/read-symbol","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.impl.errors/throw-bad-ns","cljs.tools.reader.edn/wrapping-reader","key-set","G__31134","G__31130","temp__5457__auto__","vec__31113","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","start-line","start-column","cljs.tools.reader.edn/starting-line-col-info","cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$1","G__31157","cljs.tools.reader.edn/read-string","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","goog.string/startsWith","cljs.tools.reader.impl.commons/read-past","js/Number.POSITIVE_INFINITY","js/Number.NaN","cljs.tools.reader.edn/read-list","cljs.tools.reader.impl.errors/throw-unknown-reader-tag","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.errors/throw-invalid-unicode-len","cljs.tools.reader.impl.errors/throw-invalid-unicode-escape","cljs.tools.reader.impl.errors/throw-eof-at-start","cljs.tools.reader.impl.errors/throw-eof-in-character","cljs.tools.reader.impl.errors/throw-invalid-number","cljs.tools.reader.edn/macro-terminating?","cljs.tools.reader.edn/read-keyword","G__31145","cljs.tools.reader.impl.errors/throw-invalid-character-literal","cljs.tools.reader.impl.errors.throw_eof_reading.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.impl.errors/throw-bad-metadata","G__31133","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/List","cljs.tools.reader.impl.errors/throw-unmatch-delimiter","cljs.core/odd?","cljs.core/zipmap","vals","cljs.core/map?","backslash","cljs.core/persistent!","cljs.tools.reader.impl.errors.throw_eof_delimited.cljs$core$IFn$_invoke$arity$5","vec__31123","cljs.tools.reader.impl.errors/throw-no-dispatch","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/list","G__31139","G__31126","cljs.core/rest","cljs.tools.reader.impl.errors/throw-eof-error","G__31105","G__31102","G__31103","G__31104","cljs.core/empty?","G__31150","p__31151","map__31152","cljs.core/hash-map","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token","G__31116","G__31117","G__31118","G__31119","G__31120","G__31107","cljs.tools.reader.edn/read-unicode-char"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"An EDN reader in clojure\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.edn\n  (:refer-clojure :exclude [read read-string char default-data-readers])\n  (:require [cljs.tools.reader.impl.errors :as err]\n            [cljs.tools.reader.reader-types :refer\n             [read-char unread peek-char indexing-reader?\n              get-line-number get-column-number get-file-name string-push-back-reader]]\n            [cljs.tools.reader.impl.utils :refer\n             [char ex-info? whitespace? numeric? desugar-meta namespace-keys second']]\n            [cljs.tools.reader.impl.commons :refer\n             [number-literal? read-past match-number parse-symbol read-comment throwing-reader]]\n            [cljs.tools.reader :refer [default-data-readers char-code]]\n            [goog.string :as gstring])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare read macros dispatch-macros)\n\n(defn- ^boolean macro-terminating? [ch]\n  (and (not (identical? \\# ch))\n       (not (identical? \\' ch))\n       (not (identical? \\: ch))\n       (macros ch)))\n\n(defn- ^boolean not-constituent? [ch]\n  (or (identical? \\@ ch)\n      (identical? \\` ch)\n      (identical? \\~ ch)))\n\n(defn- read-token\n  ([rdr kind initch]\n     (read-token rdr kind initch true))\n  ([rdr kind initch validate-leading?]\n     (cond\n      (not initch)\n      (err/throw-eof-at-start rdr kind)\n\n      (and validate-leading?\n           (not-constituent? initch))\n      (err/throw-bad-char rdr kind initch)\n\n      :else\n      (loop [sb (StringBuffer.)\n             ch (do (unread rdr initch) initch)]\n        (if (or (whitespace? ch)\n                (macro-terminating? ch)\n                (nil? ch))\n          (str sb)\n          (if (not-constituent? ch)\n            (err/throw-bad-char rdr kind ch)\n            (recur (doto sb (.append (read-char rdr))) (peek-char rdr))))))))\n\n(declare read-tagged)\n\n(defn- read-dispatch\n  [rdr _ opts]\n  (if-let [ch (read-char rdr)]\n    (if-let [dm (dispatch-macros ch)]\n      (dm rdr ch opts)\n      (if-let [obj (read-tagged (doto rdr (unread ch)) ch opts)]\n        obj\n        (err/throw-no-dispatch rdr ch)))\n    (err/throw-eof-at-dispatch rdr)))\n\n(defn- read-unmatched-delimiter\n  [rdr ch opts]\n  (err/throw-unmatch-delimiter rdr ch))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- read-unicode-char\n  ([token offset length base]\n     (let [l (+ offset length)]\n       (when-not (== (count token) l)\n         (err/throw-invalid-unicode-literal nil token))\n       (loop [i offset uc 0]\n         (if (== i l)\n           (js/String.fromCharCode uc)\n           (let [d (char-code (nth token i) base)]\n             (if (== d -1)\n               (err/throw-invalid-unicode-digit-in-token nil (nth token i) token)\n               (recur (inc i) (+ d (* uc base)))))))))\n\n  ([rdr initch base length exact?]\n     (loop [i 1 uc (char-code initch base)]\n       (if (== uc -1)\n         (err/throw-invalid-unicode-digit rdr initch)\n         (if-not (== i length)\n           (let [ch (peek-char rdr)]\n             (if (or (whitespace? ch)\n                     (macros ch)\n                     (nil? ch))\n               (if exact?\n                 (err/throw-invalid-unicode-len rdr i length)\n                 (js/String.fromCharCode uc))\n               (let [d (char-code ch base)]\n                 (read-char rdr)\n                 (if (== d -1)\n                   (err/throw-invalid-unicode-digit rdr ch)\n                   (recur (inc i) (+ d (* uc base)))))))\n           (js/String.fromCharCode uc))))))\n\n(def ^:private ^:const upper-limit (.charCodeAt \\uD7ff 0))\n(def ^:private ^:const lower-limit (.charCodeAt \\uE000 0))\n\n(defn- read-char*\n  [rdr backslash opts]\n  (let [ch (read-char rdr)]\n    (if-not (nil? ch)\n      (let [token (if (or (macro-terminating? ch)\n                          (not-constituent? ch)\n                          (whitespace? ch))\n                    (str ch)\n                    (read-token rdr :character ch false))\n            token-len (count token)]\n        (cond\n\n         (== 1 token-len)  (nth token 0)\n\n         (identical? token \"newline\") \\newline\n         (identical? token \"space\") \\space\n         (identical? token \"tab\") \\tab\n         (identical? token \"backspace\") \\backspace\n         (identical? token \"formfeed\") \\formfeed\n         (identical? token \"return\") \\return\n\n         (gstring/startsWith token \"u\")\n         (let [c (read-unicode-char token 1 4 16)\n               ic (.charCodeAt c)]\n           (if (and (> ic upper-limit)\n                    (< ic lower-limit))\n             (err/throw-invalid-character-literal rdr (.toString ic 16))\n             c))\n\n         (gstring/startsWith token \"o\")\n         (let [len (dec token-len)]\n           (if (> len 3)\n             (err/throw-invalid-octal-len rdr token)\n             (let [uc (read-unicode-char token 1 len 8)]\n               (if (> (int uc) 0377)\n                 (err/throw-bad-octal-number rdr)\n                 uc))))\n\n         :else (err/throw-unsupported-character rdr token)))\n      (err/throw-eof-in-character rdr))))\n\n(defn ^:private starting-line-col-info [rdr]\n  (when (indexing-reader? rdr)\n    [(get-line-number rdr) (int (dec (int (get-column-number rdr))))]))\n\n(defn- read-delimited\n  [kind delim rdr opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        delim (char delim)]\n    (loop [a (transient [])]\n      (let [ch (read-past whitespace? rdr)]\n        (when-not ch\n          (err/throw-eof-delimited rdr kind start-line start-column (count a)))\n        (if (= delim (char ch))\n          (persistent! a)\n          (if-let [macrofn (macros ch)]\n            (let [mret (macrofn rdr ch opts)]\n              (recur (if-not (identical? mret rdr) (conj! a mret) a)))\n            (let [o (read (doto rdr (unread ch)) true nil opts)]\n              (recur (if-not (identical? o rdr) (conj! a o) a)))))))))\n\n(defn- read-list\n  [rdr _ opts]\n  (let [the-list (read-delimited :list \\) rdr opts)]\n    (if (empty? the-list)\n      '()\n      (apply list the-list))))\n\n(defn- read-vector\n  [rdr _ opts]\n  (read-delimited :vector \\] rdr opts))\n\n\n(defn- read-map\n  [rdr _ opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        the-map (read-delimited :map \\} rdr opts)\n        map-count (count the-map)\n        ks (take-nth 2 the-map)\n        key-set (set ks)]\n    (when (odd? map-count)\n      (err/throw-odd-map rdr start-line start-column the-map))\n    (when-not (= (count key-set) (count ks))\n      (err/throw-dup-keys rdr :map ks))\n    (if (<= map-count (* 2 (.-HASHMAP-THRESHOLD cljs.core/PersistentArrayMap)))\n      (.fromArray cljs.core/PersistentArrayMap (to-array the-map) true true)\n      (.fromArray cljs.core/PersistentHashMap (to-array the-map) true))))\n\n(defn- read-number\n  [rdr initch opts]\n  (loop [sb (doto (StringBuffer.) (.append initch))\n         ch (read-char rdr)]\n    (if (or (whitespace? ch) (macros ch) (nil? ch))\n      (let [s (str sb)]\n        (unread rdr ch)\n        (or (match-number s)\n            (err/throw-invalid-number rdr s)))\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- escape-char [sb rdr]\n  (let [ch (read-char rdr)]\n    (case ch\n      \\t \"\\t\"\n      \\r \"\\r\"\n      \\n \"\\n\"\n      \\\\ \"\\\\\"\n      \\\" \"\\\"\"\n      \\b \"\\b\"\n      \\f \"\\f\"\n      \\u (let [ch (read-char rdr)]\n           (if (== -1 (js/parseInt (int ch) 16))\n             (err/throw-invalid-unicode-escape rdr ch)\n             (read-unicode-char rdr ch 16 4 true)))\n      (if (numeric? ch)\n        (let [ch (read-unicode-char rdr ch 8 3 false)]\n          (if (> (int ch) 0377)\n            (err/throw-bad-octal-number rdr)\n            ch))\n        (err/throw-bad-escape-char rdr ch)))))\n\n(defn- read-string*\n  [rdr _ opts]\n  (loop [sb (StringBuffer.)\n         ch (read-char rdr)]\n    (case ch\n      nil (err/throw-eof-reading rdr :string \\\" sb)\n      \\\\ (recur (doto sb (.append (escape-char sb rdr)))\n                (read-char rdr))\n      \\\" (str sb)\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- read-symbol\n  [rdr initch]\n  (when-let [token (read-token rdr :symbol initch)]\n    (case token\n\n      ;; special symbols\n      \"nil\" nil\n      \"true\" true\n      \"false\" false\n      \"/\" '/\n\n      (or (when-let [p (parse-symbol token)]\n            (symbol (p 0) (p 1)))\n          (err/throw-invalid rdr :symbol token)))))\n\n(defn- read-keyword\n  [reader initch opts]\n  (let [ch (read-char reader)]\n    (if-not (whitespace? ch)\n      (let [token (read-token reader :keyword ch)\n            s (parse-symbol token)]\n        (if (and s (== -1 (.indexOf token \"::\")))\n          (let [ns (s 0)\n                name (s 1)]\n            (if (identical? \\: (nth token 0))\n              (err/throw-invalid reader :keyword token) ;; no ::keyword in edn\n              (keyword ns name)))\n          (err/throw-invalid reader :keyword token)))\n      (err/throw-single-colon reader))))\n\n(defn- wrapping-reader\n  [sym]\n  (fn [rdr _ opts]\n    (list sym (read rdr true nil opts))))\n\n(defn- read-meta\n  [rdr _ opts]\n  (let [m (desugar-meta (read rdr true nil opts))]\n    (when-not (map? m)\n      (err/throw-bad-metadata rdr m))\n    (let [o (read rdr true nil opts)]\n      (if (implements? IMeta o)\n        (with-meta o (merge (meta o) m))\n        (err/throw-bad-metadata-target rdr o)))))\n\n(defn- read-set\n  [rdr _ opts]\n  (let [coll (read-delimited :set \\} rdr opts)\n        the-set (set coll)]\n      (when-not (= (count coll) (count the-set))\n        (err/throw-dup-keys rdr :set coll))\n      the-set))\n\n(defn- read-discard\n  [rdr _ opts]\n  (doto rdr\n    (read true nil true)))\n\n(defn- read-namespaced-map\n  [rdr _ opts]\n  (let [token (read-token rdr :namespaced-map (read-char rdr))]\n    (if-let [ns (some-> token parse-symbol second')]\n      (let [ch (read-past whitespace? rdr)]\n        (if (identical? ch \\{)\n          (let [items (read-delimited :namespaced-map \\} rdr opts)]\n            (when (odd? (count items))\n              (err/throw-odd-map rdr nil nil items))\n            (let [keys (namespace-keys (str ns) (take-nth 2 items))\n                  vals (take-nth 2 (rest items))]\n              (when-not (= (count (set keys)) (count keys))\n                (err/throw-dup-keys rdr :namespaced-map keys))\n              (zipmap keys vals)))\n          (err/throw-ns-map-no-map rdr token)))\n      (err/throw-bad-ns rdr token))))\n\n(defn- read-symbolic-value\n  [rdr _ opts]\n  (let [sym (read rdr true nil opts)]\n    (case sym\n\n      NaN js/Number.NaN\n      -Inf js/Number.NEGATIVE_INFINITY\n      Inf js/Number.POSITIVE_INFINITY\n\n      (err/reader-error rdr (str \"Invalid token: ##\" sym)))))\n\n(defn- macros [ch]\n  (case ch\n    \\\" read-string*\n    \\: read-keyword\n    \\; read-comment\n    \\^ read-meta\n    \\( read-list\n    \\) read-unmatched-delimiter\n    \\[ read-vector\n    \\] read-unmatched-delimiter\n    \\{ read-map\n    \\} read-unmatched-delimiter\n    \\\\ read-char*\n    \\# read-dispatch\n    nil))\n\n(defn- dispatch-macros [ch]\n  (case ch\n    \\^ read-meta                ;deprecated\n    \\{ read-set\n    \\< (throwing-reader \"Unreadable form\")\n    \\! read-comment\n    \\_ read-discard\n    \\: read-namespaced-map\n    \\# read-symbolic-value\n    nil))\n\n(defn- read-tagged [rdr initch opts]\n  (let [tag (read rdr true nil opts)\n        object (read rdr true nil opts)]\n    (if-not (symbol? tag)\n      (err/throw-bad-reader-tag rdr \"Reader tag must be a symbol\"))\n    (if-let [f (or (get (:readers opts) tag)\n                   (default-data-readers tag))]\n      (f object)\n      (if-let [d (:default opts)]\n        (d tag object)\n        (err/throw-unknown-reader-tag rdr tag)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read\n  \"Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   clojure.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader] (read {} reader))\n  ([{:keys [eof] :as opts} reader]\n     (let [eof-error? (not (contains? opts :eof))]\n       (read reader eof-error? eof opts)))\n  ([reader eof-error? eof opts]\n     (try\n       (loop []\n         (let [ch (read-char reader)]\n           (cond\n            (whitespace? ch) (recur)\n            (nil? ch) (if eof-error? (err/throw-eof-error reader nil) eof)\n            (number-literal? reader ch) (read-number reader ch opts)\n            :else (let [f (macros ch)]\n                    (if f\n                      (let [res (f reader ch opts)]\n                        (if (identical? res reader)\n                          (recur)\n                          res))\n                      (read-symbol reader ch))))))\n       (catch js/Error e\n         (if (ex-info? e)\n           (let [d (ex-data e)]\n             (if (= :reader-exception (:type d))\n               (throw e)\n               (throw (ex-info (.-message e)\n                               (merge {:type :reader-exception}\n                                      d\n                                      (if (indexing-reader? reader)\n                                        {:line   (get-line-number reader)\n                                         :column (get-column-number reader)\n                                         :file   (get-file-name reader)}))\n                               e))))\n           (throw (ex-info (.-message e)\n                           (merge {:type :reader-exception}\n                                  (if (indexing-reader? reader)\n                                    {:line   (get-line-number reader)\n                                     :column (get-column-number reader)\n                                     :file   (get-file-name reader)}))\n                           e)))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per clojure.tools.reader.edn/read\"\n  ([s] (read-string {:eof nil} s))\n  ([opts s]\n     (when (and s (not= s \"\"))\n       (read opts (string-push-back-reader s)))))\n"]}