{"version":3,"file":"reagent.impl.batching.js","sources":["reagent/impl/batching.cljs"],"mappings":"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","names":["this","c","f","G__36498","reagent.impl.batching/next-tick","scheduled?","reagent.impl.batching/schedule","w","js/window","reagent.impl.batching/compare-mount-order","c1","c2","reagent.impl.batching/mark-rendered","k","reagent.impl.batching/run-queue","cs","reagent.impl.batching/render-queue","reagent.impl.batching/->RenderQueue","temp__5461__auto__","fs","reagent.impl.batching/do-before-flush","js/setTimeout","or__3922__auto__","a","n__4376__auto__","i","reagent.impl.batching/flush","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","reagent.impl.batching/RenderQueue","reagent.impl.batching/flush-after-render","reagent.impl.batching/fake-raf","reagent.impl.batching/mount-count","reagent.impl.batching/do-after-render","js/Error","reagent.impl.batching/ratom-flush","fexpr__36497","reagent.impl.batching/next-mount-count","reagent.impl.batching/queue-render","reagent.impl.util/is-client"],"sourcesContent":["(ns reagent.impl.batching\n  (:refer-clojure :exclude [flush])\n  (:require [reagent.debug :refer-macros [dbg assert-some]]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.impl.util :refer [is-client]]\n            [clojure.string :as string]))\n\n;;; Update batching\n\n(defonce mount-count 0)\n\n(defn next-mount-count []\n  (set! mount-count (inc mount-count)))\n\n(defn fake-raf [f]\n  (js/setTimeout f 16))\n\n(def next-tick\n  (if-not is-client\n    fake-raf\n    (let [w js/window]\n      (or ($ w :requestAnimationFrame)\n          ($ w :webkitRequestAnimationFrame)\n          ($ w :mozRequestAnimationFrame)\n          ($ w :msRequestAnimationFrame)\n          fake-raf))))\n\n(defn compare-mount-order [c1 c2]\n  (- ($ c1 :cljsMountOrder)\n     ($ c2 :cljsMountOrder)))\n\n(defn run-queue [a]\n  ;; sort components by mount order, to make sure parents\n  ;; are rendered before children\n  (.sort a compare-mount-order)\n  (dotimes [i (alength a)]\n    (let [c (aget a i)]\n      (when (true? ($ c :cljsIsDirty))\n        ($ c forceUpdate)))))\n\n\n;; Set from ratom.cljs\n(defonce ratom-flush (fn []))\n\n(deftype RenderQueue [^:mutable ^boolean scheduled?]\n  Object\n  (enqueue [this k f]\n    (assert-some f \"Enqueued function\")\n    (when (nil? (aget this k))\n      (aset this k (array)))\n    (.push (aget this k) f)\n    (.schedule this))\n\n  (run-funs [this k]\n    (when-some [fs (aget this k)]\n      (aset this k nil)\n      (dotimes [i (alength fs)]\n        ((aget fs i)))))\n\n  (schedule [this]\n    (when-not scheduled?\n      (set! scheduled? true)\n      (next-tick #(.run-queues this))))\n\n  (queue-render [this c]\n    (.enqueue this \"componentQueue\" c))\n\n  (add-before-flush [this f]\n    (.enqueue this \"beforeFlush\" f))\n\n  (add-after-render [this f]\n    (.enqueue this \"afterRender\" f))\n\n  (run-queues [this]\n    (set! scheduled? false)\n    (.flush-queues this))\n\n  (flush-after-render [this]\n    (.run-funs this \"afterRender\"))\n\n  (flush-queues [this]\n    (.run-funs this \"beforeFlush\")\n    (ratom-flush)\n    (when-some [cs (aget this \"componentQueue\")]\n      (aset this \"componentQueue\" nil)\n      (run-queue cs))\n    (.flush-after-render this)))\n\n(defonce render-queue (->RenderQueue false))\n\n(defn flush []\n  (.flush-queues render-queue))\n\n(defn flush-after-render []\n  (.flush-after-render render-queue))\n\n(defn queue-render [c]\n  (when-not ($ c :cljsIsDirty)\n    ($! c :cljsIsDirty true)\n    (.queue-render render-queue c)))\n\n(defn mark-rendered [c]\n  ($! c :cljsIsDirty false))\n\n(defn do-before-flush [f]\n  (.add-before-flush render-queue f))\n\n(defn do-after-render [f]\n  (.add-after-render render-queue f))\n\n(defn schedule []\n  (when (false? (.-scheduled? render-queue))\n    (.schedule render-queue)))\n"]}