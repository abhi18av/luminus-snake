{"version":3,"file":"devtools.formatters.state.js","sources":["devtools/formatters/state.cljs"],"mappings":";;AAiBA,sDAAA,tDAAeI;AAEf,uDAAA,vDAAMkC;AACJ,SAAA,wDAAA,vDAAOlC,VADT;;AAGA,8CAAA,9CAAMS;AAAN,AAAA;;AAGA,8CAAA,9CAAMX;AAAN,AAAA,oBACS,AAACoC;AADV;AAAA,AAAA,MAAA,KAAAR,MAAA;;;AAEE1B;;AAEF,AAAA,uDAAA,+DAAAmB,tHAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,0FAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,AAAA,AAAAE,4FAAA,WAA6BlB,EAAIC;AAAjC,AAAA,oBACS,AAAC0B;AADV;AAAA,AAAA,MAAA,KAAAR,MAAA;;;AAEE,OAAM1B,sDAAgB,AAACM,8CAAMC,EAAEP,oDAAgBQ;;;AAFjD,AAAA,AAAAiB,+EAAA;;AAAA;AAAA,AAAA,AAAAA,yEAAA,WAAAE;AAAA,AAAA,IAAAC,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAMA,iEAAA,jEAAMM,0IAAiCpB;AACrC,oKAAA,7JAACH,0FAAsBC,8HAAgBC,eAAKC,9OAD9C;;AAGA,gDAAA,hDAAMwB;AACJ,OAAA,yFAAU,AAACvC,hGADb;;AAGA,+CAAA,/CAAMgB,sGAAcD;AAApB,AACE,IAAMI,UAAQ,AAACoB;AACb,sBAAA,fAACrB,PADH;kBACED;AAAA,AAAO,QAAAA,qBAAcF;;CAAQI;;AAEjC,qDAAA,rDAAYkB;AACV,OAAC/B,mBAAQ,AAAA,8GAAoB,AAACN,xIADhC;;AAGA,kDAAA,lDAAMO,4GAAuBR,MAAMD;AAAnC,AACE,GAAI,EAAA,QAAA,PAAOA;AACT,2DAAA,pDAACM,8CAAML,sFAAyBD;;AAChC,4DAAA,rDAACG,+CAAOF;;;AAEZ,oDAAA,pDAAMuC;AACJ,OAAA,iHAAsB,AAACtC,xHADzB;;AAGA,oDAAA,pDAAMG,gHAAyBJ,MAAMD;AAArC,AACE,GAAI,EAAA,QAAA,PAAOA;AACT,2DAAA,pDAACM,8CAAML,yFAA2BD;;AAClC,4DAAA,rDAACG,+CAAOF;;;AAEZ,6CAAA,7CAAMqB;AACJ,OAAA,mGAAe,AAACpB,1GADlB;;AAGA,6CAAA,7CAAMkC,kGAAkBnC,MAAMD;AAC5B,GAAI,EAAA,QAAA,PAAOA,NADb;AAEI,2DAAA,pDAACM,8CAAML,2EAAoBD;;AAC3B,4DAAA,rDAACG,+CAAOF;;;AAEZ,+CAAA,/CAAMM,sGAAoBN;oGACpBA,pGAEA,gHAAA,zGAACI,PAHP,yDAEM,iDAAA,jDAAC+B","names":["val","state","devtools.formatters.state/get-current-state","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","devtools.formatters.state/*current-state*","devtools.formatters.state/set-managed-print-level","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","devtools.formatters.state/reset-depth-limits","cljs.core/boolean","devtools.formatters.state/set-prevent-recursion","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","f","args","devtools.formatters.state/get-default-state","devtools.formatters.state.update_current_state_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/conj","object","devtools.formatters.state/is-circular?","p1__28743#","cljs.core/some","history","devtools.formatters.state/get-depth-budget","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","devtools.formatters.state/update-current-state!","js/Error","seq28738","G__28739","cljs.core/first","cljs.core/next","self__4486__auto__","devtools.formatters.state/set-depth-budget","devtools.formatters.state/push-object-to-current-history!","devtools.formatters.state/valid-current-state?","devtools.formatters.state/prevent-recursion?","devtools.formatters.state/get-managed-print-level","devtools.formatters.state/get-current-history"],"sourcesContent":["(ns devtools.formatters.state)\n\n; - state management --------------------------------------------------------------------------------------------------------\n;\n; we have to maintain some state:\n; a) to prevent infinite recursion in some pathological cases (https://github.com/binaryage/cljs-devtools/issues/2)\n; b) to keep track of printed objects to visually signal circular data structures\n;\n; We dynamically bind *current-config* to the config passed from \"outside\" when entering calls to our API methods.\n; Initially the state is empty, but we accumulate there a history of seen values when rendering individual values\n; in depth-first traversal order. See alt-printer-impl where we re-bind *current-config* for each traversal level.\n; But there is a catch. For larger data structures our printing methods usually do not print everything at once.\n; We can include so called \"object references\" which are just placeholders which can be expanded later\n; by DevTools UI (when user clicks a disclosure triangle).\n; For proper continuation in rendering of those references we have to carry our existing state over.\n; We use \"config\" feature of custom formatters system to pass current state to future API calls.\n\n(def ^:dynamic *current-state* nil)\n\n(defn valid-current-state? []\n  (some? *current-state*))\n\n(defn get-default-state []\n  {})\n\n(defn get-current-state []\n  {:pre [(valid-current-state?)]}\n  *current-state*)\n\n(defn update-current-state! [f & args]\n  {:pre [(valid-current-state?)]}\n  (set! *current-state* (apply f *current-state* args)))\n\n; -- high level API ---------------------------------------------------------------------------------------------------------\n\n(defn push-object-to-current-history! [object]\n  (update-current-state! update :history conj object))\n\n(defn get-current-history []\n  (:history (get-current-state)))\n\n(defn is-circular? [object]\n  (let [history (get-current-history)]\n    (some #(identical? % object) history)))\n\n(defn ^bool prevent-recursion? []\n  (boolean (:prevent-recursion (get-current-state))))\n\n(defn set-prevent-recursion [state val]\n  (if (some? val)\n    (assoc state :prevent-recursion val)\n    (dissoc state :prevent-recursion)))\n\n(defn get-managed-print-level []\n  (:managed-print-level (get-current-state)))\n\n(defn set-managed-print-level [state val]\n  (if (some? val)\n    (assoc state :managed-print-level val)\n    (dissoc state :managed-print-level)))\n\n(defn get-depth-budget []\n  (:depth-budget (get-current-state)))\n\n(defn set-depth-budget [state val]\n  (if (some? val)\n    (assoc state :depth-budget val)\n    (dissoc state :depth-budget)))\n\n(defn reset-depth-limits [state]\n  (-> state\n      (set-depth-budget nil)\n      (set-managed-print-level nil)))\n"]}