{"version":3,"file":"shadow.cljs.devtools.client.env.js","sources":["shadow/cljs/devtools/client/env.cljs"],"mappings":"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","names":["original-print-fn","shadow.cljs.devtools.client.env/repl-pprint","shadow.cljs.devtools.client.env/get-url-base","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.cljs.devtools.client.env/runtime-id","fn-obj","cljs.core/reverse","load-code-fn","cljs.core/*print-fn*","shadow.cljs.devtools.client.env/reset-print-fns!","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","original-print-err-fn","args","log-missing-fn","fn-sym","shadow.cljs.devtools.client.env/get-ws-url-base","cljs.core/*2","cljs.core/*1","next","shadow.cljs.devtools.client.env/repl-error","e","shadow.cljs.devtools.client.env/ws-listener-url","client-type","goog/define","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","obj","shadow.cljs.devtools.client.env/process-ws-msg","text","handler","cljs.core/Keyword","runtime-type","cljs.core/*3","js/goog.global.document","cljs.core/seq","shadow.cljs.devtools.client.env/devtools-url","js/goog.getObjectByName","fn-str","js/$CLJS","log-call-async","G__31277","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","result","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","js/Error","shadow.cljs.devtools.client.env/ws-url","shadow.cljs.devtools.client.env/repl-print-fn","ret","msg","tag","value","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/get-repl-host","shadow.cljs.devtools.client.env/repl-port","cljs.core/set-print-err-fn!","cljs.core/reset!","shadow.cljs.devtools.client.env/reset-print-fn-ref","*default-data-reader-fn*31288","cljs.tools.reader/*default-data-reader-fn*","e31289","var_args","G__31305","shadow.cljs.devtools.client.env/do-js-reload","p__31306","map__31307","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","complete-fn","js/goog.global.document.location","G__31301","task","shadow.cljs.devtools.client.env/do-js-reload*","remaining-tasks","async","load-tasks","cljs.core/name","cljs.core.map.cljs$core$IFn$_invoke$arity$1","reload-info","p1__31303#","cljs.core.into.cljs$core$IFn$_invoke$arity$3","shadow.cljs.devtools.client.env/make-task-fn","js/console.warn","ex","js/goog.global.document.location.hostname","cljs.core/set-print-fn!","log-call","cljs.core.into.cljs$core$IFn$_invoke$arity$2","e31279","temp__5457__auto__","cljs.core/deref","x","shadow.cljs.devtools.client.env/repl-host","shadow.cljs.devtools.client.env/files-url","cljs.core/*print-err-fn*","p__31310","map__31311","shadow.cljs.devtools.client.env/before-load-src","type","ns","src","p__31297","vec__31298","seq__31299","first__31300","cljs.core/first","cljs.core/next","p__31290","p__31291","map__31292","map__31293","e31296","cljs.core/pr-str","shadow.cljs.devtools.client.env/set-print-fns!","msg-fn","e31278","cljs.core/*e","sb__4430__auto__","js/goog.string.StringBuffer","*print-newline*31273","cljs.core/*print-newline*","*print-fn*31274","x__4431__auto__","seq__31313","chunk__31314","count__31315","i__31316","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","js/goog.global.SHADOW_NS_RESET","cljs.core/random-uuid","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.env/repl-call","repl-expr","repl-error","G__31280","clojure.string.join.cljs$core$IFn$_invoke$arity$2","and__3911__auto__","shadow.cljs.devtools.client.env/use-document-host","G__31281","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p1__31302#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.string/replace","js/document.location.hostname","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/console.log"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require\n    [goog.object :as gobj]\n    [clojure.string :as str]\n    [cljs.tools.reader :as reader]\n    [cljs.pprint :refer (pprint)]\n    ))\n\n;; FIXME: make this persistent somehow?\n(defonce runtime-id (random-uuid))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define repl-host \"\")\n\n(goog-define repl-port 8200)\n\n(goog-define repl-pprint false)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(goog-define ignore-warnings false)\n\n(defn get-repl-host []\n  (if (and use-document-host\n           js/goog.global.document\n           js/goog.global.document.location\n           (seq js/goog.global.document.location.hostname))\n    js/document.location.hostname\n    repl-host))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-repl-host) \":\" repl-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [runtime-type]\n  {:pre [(keyword? runtime-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" runtime-id \"/\" (name runtime-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(def repl-print-fn\n  (if-not repl-pprint\n    pr-str\n    (fn repl-pprint [obj]\n      (with-out-str\n        (pprint obj)\n        ))))\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result {:type :repl/result}\n          ret (repl-expr)]\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n\n        (assoc result\n          :value (repl-print-fn ret))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n;; FIXME: this need to become idempotent somehow\n;; but is something sets a print-fn we can't tell if that\n;; will actually call ours. only a problem if the websocket is\n;; reconnected though\n(defonce reset-print-fn-ref (atom nil))\n\n(defn set-print-fns! [msg-fn]\n  ;; cannot capture these before as they may change in between loading this file\n  ;; and running the websocket connect. the user code is loaded after this file\n  (let [original-print-fn cljs.core/*print-fn*\n        original-print-err-fn cljs.core/*print-err-fn*]\n\n    (reset! reset-print-fn-ref\n      (fn reset-print-fns! []\n        (set-print-fn! original-print-fn)\n        (set-print-err-fn! original-print-err-fn)))\n\n    (set-print-fn!\n      (fn repl-print-fn [& args]\n        (msg-fn {:type :repl/out :text (str/join \"\" args)})\n        (when original-print-fn\n          (apply original-print-fn args))))\n\n    (set-print-err-fn!\n      (fn repl-print-err-fn [& args]\n        (msg-fn {:type :repl/err :text (str/join \"\" args)})\n        (when original-print-err-fn\n          (apply original-print-err-fn args))))))\n\n(defn reset-print-fns! []\n  (when-let [x @reset-print-fn-ref]\n    (x)\n    (reset! reset-print-fn-ref nil)))\n\n(defn process-ws-msg [text handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (try\n      (let [msg (reader/read-string text)]\n        (handler msg))\n      (catch :default e\n        (js/console.warn \"failed to parse websocket message\" text e)\n        (throw e)))))\n\n(defn make-task-fn [{:keys [log-missing-fn log-call-async log-call]} {:keys [fn-sym fn-str async]}]\n  (fn [next]\n    (try\n      (let [fn-obj (js/goog.getObjectByName fn-str js/$CLJS)]\n        (cond\n          (nil? fn-obj)\n          (do (when log-missing-fn\n                (log-missing-fn fn-sym))\n              (next))\n\n          async\n          (do (when log-call-async\n                (log-call-async fn-sym))\n              (fn-obj next))\n\n          :else\n          (do (when log-call\n                (log-call fn-sym))\n              (fn-obj)\n              (next))))\n      (catch :default ex\n        (js/console.warn \"error when calling lifecycle function\" (str fn-sym) ex)\n        (next)))))\n\n(defn do-js-reload* [[task & remaining-tasks]]\n  (when task\n    (task #(do-js-reload* remaining-tasks))))\n\n(defn do-js-reload\n  \"should pass the :build-complete message and an additional callback\n   which performs the actual loading of the code (sync)\n   will call all before/after callbacks in order\"\n  ([msg load-code-fn]\n   (do-js-reload msg load-code-fn (fn [])))\n  ([{:keys [reload-info] :as msg} load-code-fn complete-fn]\n   (let [load-tasks\n         (-> []\n             ;; unload is FILO\n             (into (->> (:before-load reload-info)\n                        (map #(make-task-fn msg %))\n                        (reverse)))\n             (conj (fn [next]\n                     (load-code-fn)\n                     (next)))\n             ;; load is FIFO\n             (into (map #(make-task-fn msg %)) (:after-load reload-info))\n             (conj (fn [next]\n                     (complete-fn)\n                     (next))))]\n\n     (do-js-reload* load-tasks))))\n\n(defn before-load-src [{:keys [type ns] :as src}]\n  (when (= :cljs type)\n    (doseq [x js/goog.global.SHADOW_NS_RESET]\n      (x ns))))\n"]}