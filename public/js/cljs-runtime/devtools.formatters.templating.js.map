{"version":3,"file":"devtools.formatters.templating.js","sources":["devtools/formatters/templating.cljs"],"mappings":"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","names":["*print-level*29578","cljs.core/*print-level*","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","devtools.formatters.templating/extend-template!","seq29558","G__29559","cljs.core/first","cljs.core/next","self__4486__auto__","template","args","devtools.formatters.templating/concat-templates!","seq29553","G__29554","templates","object","header","body","start-index","devtools.formatters.templating/assert-markup-error","name","*current-render-stack*29585","*current-render-path*29586","devtools.formatters.templating/*current-render-stack*","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","markup","devtools.formatters.templating/render-json-ml*","f","v","devtools.formatters.templating/surrogate-markup?","child-value","devtools.formatters.templating/surrogate?","surrogate","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/sequential?","value","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$3","temp__5455__auto__","devtools.formatters.helpers/pref","child","devtools.formatters.templating/assert-failed-markup-rendering","initial-value","devtools.formatters.templating.make_template.cljs$core$IFn$_invoke$arity$variadic","sub-state","state-override-fn","cljs.core.map.cljs$core$IFn$_invoke$arity$2","devtools.util/pprint-str","stack","js/Error","devtools.formatters.templating/get-surrogate-header","group","devtools.formatters.templating/mark-as-group!","devtools.formatters.templating/pprint-render-path","devtools.formatters.templating/*current-render-path*","G__29579","devtools.formatters.templating/reference?","devtools.formatters.templating/render-markup*","path","seq__29521","cljs.core/seq","chunk__29522","count__29523","i__29524","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","children","devtools.formatters.templating/pprint-render-calls","devtools.formatters.templating/pprint-render-stack","devtools.formatters.state/get-current-state","devtools.formatters.templating/group?","tag","style","devtools.formatters.templating/mark-as-surrogate!","obj29566","converted-args","cljs.core/rest","cljs.core/reverse","devtools.formatters.templating/render-subtree","seq__29490","chunk__29491","count__29492","i__29493","item","items","cljs.core/fn?","vec__29581","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","html-tag","devtools.formatters.templating/render-special","cljs.core/coll?","and__3911__auto__","devtools.formatters.templating/template?","cljs.core/empty?","*current-render-path*29584","cljs.core/array?","cljs.core/seqable?","devtools.util.pprint_str.cljs$core$IFn$_invoke$arity$variadic","obj","converted-obj","devtools.formatters.templating/get-surrogate-body","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","devtools.formatters.templating/get-surrogate-start-index","G__29574","devtools.formatters.templating/mark-as-template!","devtools.formatters.templating/render-json-ml","devtools.formatters.templating/emptyish?","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","msg","x29470","cljs.core/PROTOCOL_SENTINEL","devtools.formatters.templating.concat_templates_BANG_.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.templating/add-stack-separators","cljs.core/native-satisfies?","devtools.protocols/ITemplate","devtools.formatters.templating/make-template","seq29518","G__29519","G__29520","devtools.formatters.templating/replace-fns-with-markers","devtools.formatters.templating/make-reference","p__29570","vec__29571","seq29568","G__29569","x29480","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","G__29564","devtools.formatters.templating/make-surrogate","cljs.core/Keyword","clojure.string.join.cljs$core$IFn$_invoke$arity$2","clojure.walk/prewalk","x29486","devtools.protocols/IGroup","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","devtools.formatters.templating/get-surrogate-target","devtools.formatters.templating/print-preview","or__3922__auto__","devtools.formatters.templating/make-group","seq29489","self__4487__auto__","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","devtools.protocols/ISurrogate","devtools.formatters.templating/render-markup","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$4","devtools.formatters.templating.make_group.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$2","cljs.core/into-array"],"sourcesContent":["(ns devtools.formatters.templating\n  (:require-macros [devtools.oops :refer [oget oset ocall oapply safe-call unchecked-aget]])\n  (:require [clojure.walk :refer [prewalk]]\n            [devtools.util :refer [pprint-str]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]\n            [devtools.formatters.helpers :refer [pref cljs-value?]]\n            [devtools.formatters.state :refer [get-current-state prevent-recursion?]]\n            [clojure.string :as string]))\n\n; -- object marking support -------------------------------------------------------------------------------------------------\n\n(defn mark-as-group! [value]\n  (specify! value IGroup)\n  value)\n\n(defn group? [value]\n  (satisfies? IGroup value))\n\n(defn mark-as-template! [value]\n  (specify! value ITemplate)\n  value)\n\n(defn template? [value]\n  (satisfies? ITemplate value))\n\n(defn mark-as-surrogate! [value]\n  (specify! value ISurrogate)\n  value)\n\n(defn surrogate? [value]\n  (satisfies? ISurrogate value))\n\n(defn reference? [value]\n  (and (group? value)\n       (= (unchecked-aget value 0) \"object\")))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn make-group [& items]\n  (let [group (mark-as-group! #js [])]\n    (doseq [item items]\n      (if (some? item)\n        (if (coll? item)\n          (.apply (unchecked-aget group \"push\") group (mark-as-group! (into-array item)))                                               ; convenience helper to splat cljs collections\n          (.push group (pref item)))))\n    group))\n\n(defn make-template\n  [tag style & children]\n  (let [tag (pref tag)\n        style (pref style)\n        template (mark-as-template! #js [tag (if (empty? style)\n                                               #js {}\n                                               #js {\"style\" style})])]\n    (doseq [child children]\n      (if (some? child)\n        (if (coll? child)\n          (.apply (unchecked-aget template \"push\") template (mark-as-template! (into-array (keep pref child))))                         ; convenience helper to splat cljs collections\n          (if-let [child-value (pref child)]\n            (.push template child-value)))))\n    template))\n\n(defn concat-templates! [template & templates]\n  (mark-as-template! (.apply (oget template \"concat\") template (into-array (map into-array (keep pref templates))))))\n\n(defn extend-template! [template & args]\n  (concat-templates! template args))\n\n(defn make-surrogate\n  ; passing :target as body means that targt object body should be rendered using standard templates\n  ; see <surrogate-body> in markup.cljs\n  ([object] (make-surrogate object nil))\n  ([object header] (make-surrogate object header nil))\n  ([object header body] (make-surrogate object header body 0))\n  ([object header body start-index]\n   (mark-as-surrogate! (js-obj\n                         \"target\" object\n                         \"header\" header\n                         \"body\" body\n                         \"startIndex\" (or start-index 0)))))\n\n(defn get-surrogate-target [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"target\"))\n\n(defn get-surrogate-header [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"header\"))\n\n(defn get-surrogate-body [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"body\"))\n\n(defn get-surrogate-start-index [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"startIndex\"))\n\n(defn make-reference [object & [state-override-fn]]\n  {:pre [(or (nil? state-override-fn) (fn? state-override-fn))]}\n  (if (nil? object)\n    ; this code is duplicated in markup.cljs <nil>\n    (make-template :span :nil-style :nil-label)\n    (let [sub-state (if (some? state-override-fn)\n                      (state-override-fn (get-current-state))\n                      (get-current-state))]\n      (make-group \"object\" #js {\"object\" object\n                                \"config\" sub-state}))))\n\n; -- JSON ML support --------------------------------------------------------------------------------------------------------\n\n; a renderer from hiccup-like data markup to json-ml\n;\n; [[tag style] child1 child2 ...] -> #js [tag #js {\"style\" ...} child1 child2 ...]\n;\n\n(declare render-json-ml*)\n\n(def ^:dynamic *current-render-stack* [])\n(def ^:dynamic *current-render-path* [])\n\n(defn print-preview [markup]\n  (binding [*print-level* 1]\n    (pr-str markup)))\n\n(defn add-stack-separators [stack]\n  (interpose \"-------------\" stack))\n\n(defn replace-fns-with-markers [stack]\n  (let [f (fn [v]\n            (if (fn? v)\n              \"##fn##\"\n              v))]\n    (prewalk f stack)))\n\n(defn pprint-render-calls [stack]\n  (map pprint-str stack))\n\n(defn pprint-render-stack [stack]\n  (string/join \"\\n\" (-> stack\n                        reverse\n                        replace-fns-with-markers\n                        pprint-render-calls\n                        add-stack-separators)))\n\n(defn pprint-render-path [path]\n  (pprint-str path))\n\n(defn assert-markup-error [msg]\n  (assert false (str msg \"\\n\"\n                     \"Render path: \" (pprint-render-path *current-render-path*) \"\\n\"\n                     \"Render stack:\\n\"\n                     (pprint-render-stack *current-render-stack*))))\n\n(defn surrogate-markup? [markup]\n  (and (sequential? markup) (= (first markup) \"surrogate\")))\n\n(defn render-special [name args]\n  (case name\n    \"surrogate\" (let [obj (first args)\n                      converted-args (map render-json-ml* (rest args))]\n                  (apply make-surrogate (concat [obj] converted-args)))\n    \"reference\" (let [obj (first args)\n                      converted-obj (if (surrogate-markup? obj) (render-json-ml* obj) obj)]\n                  (apply make-reference (concat [converted-obj] (rest args))))\n    (assert-markup-error (str \"no matching special tag name: '\" name \"'\"))))\n\n(defn emptyish? [v]\n  (if (or (seqable? v) (array? v) (string? v))\n    (empty? v)\n    false))\n\n(defn render-subtree [tag children]\n  (let [[html-tag style] tag]\n    (apply make-template html-tag style (map render-json-ml* (remove emptyish? (map pref children))))))\n\n(defn render-json-ml* [markup]\n  (if-not (sequential? markup)\n    markup\n    (binding [*current-render-path* (conj *current-render-path* (first markup))]\n      (let [tag (pref (first markup))]\n        (cond\n          (string? tag) (render-special tag (rest markup))\n          (sequential? tag) (render-subtree tag (rest markup))\n          :else (assert-markup-error (str \"invalid json-ml markup at \" (print-preview markup) \":\")))))))\n\n(defn render-json-ml [markup]\n  (binding [*current-render-stack* (conj *current-render-stack* markup)\n            *current-render-path* (conj *current-render-path* \"<render-json-ml>\")]\n    (render-json-ml* markup)))\n\n; -- template rendering -----------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic assert-failed-markup-rendering [initial-value value]\n  (assert false (str \"result of markup rendering must be a template,\\n\"\n                     \"resolved to \" (pprint-str value)\n                     \"initial value: \" (pprint-str initial-value))))\n\n(defn render-markup* [initial-value value]\n  (cond\n    (fn? value) (recur initial-value (value))\n    (keyword? value) (recur initial-value (pref value))\n    (sequential? value) (recur initial-value (render-json-ml value))\n    (template? value) value\n    (surrogate? value) value\n    (reference? value) value\n    :else (assert-failed-markup-rendering initial-value value)))\n\n(defn render-markup [value]\n  (render-markup* value value))\n"]}