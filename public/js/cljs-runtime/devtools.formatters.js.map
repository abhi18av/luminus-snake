{"version":3,"file":"devtools.formatters.js","sources":["devtools/formatters.cljs"],"mappings":"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","names":["define!","devtools.formatters.core/body-api-call","formatter","name","wrap","fn","api-call","formatters","devtools.util/get-formatters-safe","fexpr__29895","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","monitor","sanitizer","devtools.formatters/CLJSDevtoolsFormatter","devtools.formatters/monitor-api-call-if-avail","args","o","devtools.formatters/uninstall-our-formatters!","_","devtools.util/set-formatters-safe!","new-formatters-js","devtools.formatters/*monitor-enabled*","devtools.formatters/*sanitizer-enabled*","devtools.formatters/install-our-formatter!","devtools.formatters/build-cljs-formatter","devtools.formatters/install!","or__3922__auto__","devtools.util/in-node-context?","e29889","e","devtools.formatters/*installed*","devtools.formatters/find-fn-in-debug-ns","fn-name","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","devtools.formatters/log-exception-if-avail","seq29878","self__4487__auto__","cljs.core/seq","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.formatters/monitor-api-calls","temp__5455__auto__","log-exception","e29873","devtools.formatters/installed?","monitor-api-call","devtools.formatters/sanitize","devtools.formatters.core/has-body-api-call","devtools.formatters.log_exception_if_avail.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters/obsolete-formatter-key","devtools.context/get-root","devtools.formatters/is-ours?","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","new-formatters","devtools.formatters/available?","and__3911__auto__","goog.labs.userAgent.browser/isChrome","goog.labs.userAgent.browser/isVersionOrHigher","devtools.prefs/pref","devtools.formatters/uninstall!","cljs.core/boolean","cljs.core/some","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","devtools.formatters/->CLJSDevtoolsFormatter","devtools.formatters/present?","devtools.formatters.core/header-api-call","cljs.core/empty?","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns devtools.formatters\n  (:require-macros [devtools.oops :refer [unchecked-aget unchecked-aset]])\n  (:require [goog.labs.userAgent.browser :as ua]\n            [devtools.prefs :as prefs]\n            [devtools.util :refer [get-formatters-safe set-formatters-safe! in-node-context?]]\n            [devtools.context :as context]\n            [devtools.formatters.core :refer [header-api-call has-body-api-call body-api-call]]))\n\n(def ^:dynamic *installed* false)\n(def ^:dynamic *sanitizer-enabled* true)\n(def ^:dynamic *monitor-enabled* false)\n\n(def obsolete-formatter-key \"devtoolsFormatter\")\n\n(defn ^:dynamic available? []\n  (or (in-node-context?)                                                                                                      ; node.js or Chrome 47+\n      (and (ua/isChrome) (ua/isVersionOrHigher 47))))\n\n(deftype CLJSDevtoolsFormatter [])\n\n; devtools.debug namespace may not be present => no debugging\n(defn- find-fn-in-debug-ns [fn-name]\n  (try\n    (unchecked-aget (context/get-root) \"devtools\" \"debug\" fn-name)\n    (catch :default _\n      nil)))\n\n(defn- monitor-api-call-if-avail [name api-call args]\n  (if-let [monitor-api-call (find-fn-in-debug-ns \"monitor_api_call\")]\n    (monitor-api-call name api-call args)\n    (apply api-call args)))\n\n(defn- log-exception-if-avail [& args]\n  (if-let [log-exception (find-fn-in-debug-ns \"log_exception\")]\n    (apply log-exception args)))\n\n; monitors api calls in a separate debug console if debug namespace is available\n(defn- monitor-api-calls [name api-call]\n  (fn [& args]\n    (if-not *monitor-enabled*\n      (apply api-call args)\n      (monitor-api-call-if-avail name api-call args))))\n\n; wraps our api calls in a try-catch block to prevent leaking of exceptions in case something went wrong\n(defn- sanitize [name api-call]\n  (fn [& args]\n    (if-not *sanitizer-enabled*\n      (apply api-call args)                                                                                                   ; raw API call\n      (try\n        (apply api-call args)                                                                                                 ; wrapped API call\n        (catch :default e\n          (log-exception-if-avail (str name \": \" e))\n          nil)))))\n\n(defn- build-cljs-formatter []\n  (let [wrap (fn [name api-call]\n               (let [monitor (partial monitor-api-calls name)\n                     sanitizer (partial sanitize name)]\n                 ((comp monitor sanitizer) api-call)\n                 api-call))\n        formatter (CLJSDevtoolsFormatter.)\n        define! (fn [name fn]\n                  (unchecked-aset formatter name (wrap name fn)))]\n    (define! \"header\" header-api-call)\n    (define! \"hasBody\" has-body-api-call)\n    (define! \"body\" body-api-call)\n    formatter))\n\n(defn- is-ours? [o]\n  (instance? CLJSDevtoolsFormatter o))\n\n(defn- present? []\n  (let [formatters (get-formatters-safe)]\n    (boolean (some is-ours? formatters))))\n\n(defn- install-our-formatter! [formatter]\n  (let [formatters (.slice (get-formatters-safe))]                                                                            ; slice effectively duplicates the array\n    (.push formatters formatter)                                                                                              ; acting on duplicated array\n    (set-formatters-safe! formatters)\n    (if (prefs/pref :legacy-formatter)\n      (unchecked-aset (context/get-root) obsolete-formatter-key formatter))))\n\n(defn- uninstall-our-formatters! []\n  (let [new-formatters (remove is-ours? (vec (get-formatters-safe)))\n        new-formatters-js (if (empty? new-formatters) nil (into-array new-formatters))]\n    (set-formatters-safe! new-formatters-js)))\n\n; -- installation -----------------------------------------------------------------------------------------------------------\n\n(defn installed? []\n  *installed*)\n\n(defn install! []\n  (when-not *installed*\n    (set! *installed* true)\n    (install-our-formatter! (build-cljs-formatter))\n    true))\n\n(defn uninstall! []\n  (when *installed*\n    (set! *installed* false)\n    (uninstall-our-formatters!)))\n"]}