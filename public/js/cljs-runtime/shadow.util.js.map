{"version":3,"file":"shadow.util.js","sources":["shadow/util.cljs"],"mappings":"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","names":["shadow.util/console-friendly","a4","a1","cljs.core/Keyword","a","a2","a3","a5","a6","more","shadow.util/remove-from-vector","coll","key","shadow.util/console?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ISet","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","value","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__34923","vec__34924","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v","idx","item","shadow.util/remove-item-from-coll","cljs.core/transient","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core/IMap","js/console","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/persistent!","cljs.core/IVector","var_args","G__34916","shadow.util/log","args-arr__4514__auto__","len__4499__auto__","i__4500__auto__","argseq__4515__auto__","cljs.core/IndexedSeq","seq34909","G__34910","cljs.core/first","cljs.core/next","G__34911","G__34912","G__34913","G__34914","G__34915","self__4486__auto__","args__4502__auto__","argseq__4503__auto__","shadow.util/go!","seq34892","self__4487__auto__","cljs.core/seq","body","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","cljs.core/IPrintWithWriter"],"sourcesContent":["(ns shadow.util\n  (:require-macros [shadow.util :as m])\n  (:require [cljs.core.async :as async])) ;; not really used here, but the go! macro needs this\n\n(defn console-friendly [a]\n  (cond\n   (nil? a) \"nil\"\n   (keyword? a) (str a)\n   (string? a) a\n   (number? a) a\n   (satisfies? IPrintWithWriter a) (pr-str a)\n   :else a\n   ))\n\n(defn go! [& body]\n  (throw (ex-info \"go! is a macro\" {})))\n\n(def console? (exists? js/console))\n\n(defn log\n  ([a1]\n     (when console?\n       (.log js/console\n             (console-friendly a1))))\n  ([a1 a2]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2))))\n  ([a1 a2 a3]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3))))\n  ([a1 a2 a3 a4]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4))))\n  ([a1 a2 a3 a4 a5]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5))))\n  ([a1 a2 a3 a4 a5 a6]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6))))\n  ([a1 a2 a3 a4 a5 a6 & more]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6)\n             \"more:\"\n             (pr-str more)))))\n\n;; HAX\n(comment\n  (def default-ex-info js/cljs.core.ex-info)\n\n  (set! (.. js/cljs -core -ex-info)\n    (fn shadow-ex-info\n      ([msg map]\n       (m/log \"EX-INFO:\" msg map)\n       (default-ex-info msg map))\n      ([msg map cause]\n       (m/log \"EX-INFO:\" msg map cause)\n       (default-ex-info msg map cause))\n      )))\n\n\n(defn remove-from-vector [coll key]\n  (->> (map-indexed vector coll)\n       (reduce (fn [v [idx item]]\n                 (if (= idx key)\n                   v\n                   (conj! v item)))\n               (transient []))\n       (persistent!)))\n\n(defn remove-item-from-coll [coll key value]\n  (cond\n   (satisfies? IVector coll)\n   (remove-from-vector coll key)\n   (satisfies? IMap coll)\n   (dissoc coll key)\n   (satisfies? ISet coll)\n   (disj coll value)\n   :else (throw (ex-info \"unknown coll type\" {:coll coll :key key :value value}))\n   ))\n"]}