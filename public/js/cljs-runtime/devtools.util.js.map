{"version":3,"file":"devtools.util.js","sources":["devtools/util.cljs"],"mappings":";;;;;;;;AAaA,+BAAA,/BAAKgE,AAFL;AAGA,4BAAA,5BAAKF;AACL,+CAAA,/CAAKiB;AAGL,qDAAA,rDAAeuD;AACf,yCAAA,zCAAea;AACf,+DAAA,/DAAe5H;AAIf,AAAA,2BAAA,mCAAAqB,9DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,8DAAAF;;;AAAA,AAAA,AAAA,AAAAE,gEAAA,WAAoBX;AAApB,AACE,IAAAkG,mBAAA,KAAAC;AAAA,AAAA,IAAAC,uCAAAC;IAAAC,kCAAAC;AAAA,AAAA,AAAAF,sCAAA;;AAAA,AAAAE,iCAAA;kBAAAC;AAAA,AAAA,OAAAN,wBAAAM;;;;AAAA,IAAA,AACE,IAAAmB,qCAAUC;AAAV,AAAA,oCAAA,pCAAUA;;IACR,AAAC9H,8CAAMC,mBAAmBC,rEAD5B,IAAA;UAAA,AAAA,oCAAA2H,pCAAUC;WADZ,AAAA,AAAArB,iCAAAD;;AAAA,AAAAD,sCAAAD;;AAAA,oDAAAF;;;AADF,AAAA,AAAAvF,mDAAA;;AAAA;AAAA,AAAA,AAAAA,6CAAA,WAAAC;AAAA,AAAA,IAAAC,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAOA,kCAAA,lCAAgBsC;AAAhB,AACE,oDAAK;;AAEP,8BAAA,9BAAgBuD;AAAhB,AACE,QAAA,6DAAsB,CAACvD,gEAAAA,kEAAAA;;AAEzB,6BAAA,7BAAM5B;AACJ,QAACmF,4DAAAA,8DAAAA,lIADH;;AAKA,8BAAA,9BAAgB1I,oEAAe+H;AAC7B,IAAA,AACE,IAAMzE,UAAQ,MAAA,LAAMyE,nBAFxB;IAGUrD,UAAQ,SAAA,RAAMpB;IACdD,WAAS,SAAA,RAAMC;AAFrB,AAGE,oBAAI,iBAAAlC,oBAAKsD;AAAL,AAAA,oBAAAtD;AAAaiC;;AAAbjC;;;4GACSsD,5GADb,kDAAA,kEAAA,8DAEarB;;AAFb;;oBAGcuB,JAPlB,QAAAkD;AAAA,AAAA;;AAUF,qCAAA,rCAAgB6B,kFAAsB5J;AACpC,oDAAK,iBAAAwE,mBAAI,AAAA,4FAAWxE,pLADtB;AACO,AAAA,oBAAAwE;AAAAA;;AAAA;;MAAL,gDAAwC,iBAAAA,mBAAI,AAAA,wFAAUxE;AAAd,AAAA,oBAAAwE;AAAAA;;AAAA;;;;AAE1C,uCAAA,vCAAgBoC;AAAhB,AACE,SAAA,geAAA,/dAAO,CAAC3G,4DAAAA,0NAAAA,hKAAc,sMAAA,rMAACC,0DAAAA,4DAAAA,gFAAAA,0DAAAA,4DAAAA;;AAIzB,2CAAA,3CAAgB2D;AACd,IAAA9D,qBAAmB,CAACE,4DAAAA,0NAAAA,hKAAc,sMAAA,rMAACC,0DAAAA,4DAAAA,gFAAAA,0DAAAA,4DAAAA,7cADrC;AACE,AAAA,oBAAAH;AAAA,gBAAAA,ZAASC;AAAT,AACE,QAAA,oDAAa,CAAC4J,mEAAAA,8EAAAA,bAAqB5J,0DAAAA;;AACnC,IAAMJ,aAAW,AAACsI;AAChB,GAAI,AAACvI,uBAAOC,1BADd;AACE;;AAEEA;;;;AAIR,oCAAA,pCAAgBmJ,gFAAqBzH,QAAQI,eAAeH;AAC1D,QAAA,wEAAA,oFAAA,KAAA,+MAAA,jTAAwBD,mFAAsCC,gGACpB,AAACwI,wGAAOrI,lWAFpD;;AAIA,0CAAA,1CAAgBoD,4FAA2BxD;gLAED,CAACuC,yEAAAA,2EAAAA,rUAF3C,AACE,QAAA,gEAAA,yBAAA,0RAAA,5TAAgBvC;;AAGlB,iDAAA,jDAAgB2B;AAAhB,AACE,QAAA,6DAAA;;AAKF,8BAAA,9BAAKG;AAEL,oCAAA,pCAAM4D;AACJ,IAAM3D,aAAW,CAAgB,CAACnD,0DAAAA,4DAAAA,sCAAkBkD,/KADtD;AACE,AACE,GAAI,AAACsE,uBAAOrE;AACVA;;AADF;;;AAIJ,0CAAA,1CAAMyC,4FAAsBhF;AAA5B,AAAA,GACS,EAAI,mBAAA,lBAAMA,6BAAgB,AAAC4G,uBAAO5G;AAD3C;AAAA,AAAA,MAAA,KAAAoD,MAAA;;;sMAEuD,AAACvE,FAAL,0CAAA,9OAAjD,SAAiBO,0DAAAA,4DAAAA,oHAAgEY,3OAAjE,6JAAmBsC,wDAA0BtC;;AAE/D,0DAAA,1DAAM+H,4HAAsCzG;AAA5C,AACE,oBAAM,oBAAA,pBAAC7B;4BACewE,5BAApB,WAAW,kFAAyC,jEAAjC,kBAAA,AAAAC,gBAAYC,+BAAsBC,lFAAzCC,PAAN7C,JADR;AACE,AACE,GAAA,EAAQ,AAAC3C,uBAAO2C;AACd,OAAO,CAACH,6DAAAA,+DAAAA,8CAAqBC,IAAI,AAACC,gHAAWC;;AAD/C;;;AAFJ;;;AAOF,AAAA;;;;;;AAAA;AAAA,AAAA,kDAAA,lDAASuE;AAAT,AAAA;;;AAAA,AAAA,wDAAA,xDAASA;;AAAT,AAAA,2DAAA,3DAASA;;AAAT,AAAA,gEAAA,WAAAmD,mBAAAC,qBAAAC,nHAASrD;AAAT,AAAA,OAAAsD,iBAAAF,qBAAA;;;AAAA;;;8CAAA,9CAASG;AAAT,AAAA,YAAAvD;;;AAGA,8BAAA,9BAAMZ,AAHGY;AAGT,AACE,IAAMlG,WAAS,KAAAkG;AACb,UAAA,TAAgBlG,qBAAkB,tBADpC;kBACyCC,QAAQC;AAAb,AACE,qDAAA,rDAAMoH;;AADR;;;;AAGlC,UAAA,TAAgBtH,sBAAmB,qBAAA,rBAAC0E;;AACpC,UAAA,TAAgB1E,mBAAgB,qBAAA,rBAAC0E;;AACjC1E;;AAEJ,uCAAA,vCAAMoF,sFAAmBpF;AAAzB,AACE,IAAM0C,aAAW,AAAC2D;AAChB,AAAO3D,gBAAW1C,hBADpB;;AAEE,OAACmF,wCAAqBzC;;AAE1B,yCAAA,zCAAMyE,0FAAqBnH;AAA3B,AAIE,IAAMK,qBAAmB,CAAgB,CAACd,0DAAAA,4DAAAA,sCAAkBkD;AAC1D,GAAI,AAACsE,uBAAO1G,1BADd;AAEI,IAAMF,iBAAe,0BAAA,1BAASE;kBAATD;AAAA,AAA6B,SAAK,sDAAAA,tDAACE,6CAAEN;;;AAA1D,AACE,OAACmF,wCAAqBhF;;AAF1B;;;AAIJ,qDAAA,rDAAMwE;AAAN,AACE,GAAI,EAAKwD,4CAAe,EAAKb;AAC3B,GAAU/G;AAAV;;AACE,+DAAA,/DAAMA,AADR;;AAEE,OAAO,CAACiB,6DAAAA,+DAAAA,8CAAqB,CAACc,+EAAAA,iFAAAA;;;AAHlC;;;AAKF,4EAAA,5EAAME,gKAAwDxC;AAA9D,AACE,AAACmH,uCAAoBnH;;AACrB,OAAC2E;;AAGH,uCAAA,vCAAM+B;AACJ,IAAMlD,IAAE,RADV;AACU,AAAA;;AACN,IAAAH,iBAAMG,rBADR;IACEF,8BAAAD;AAAA,AAAA,oBAAAC;AAAA;AAAA,AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,CAAA,4EAAA,MAAA,mDAAAF,2BAAA,KAAA;;;AAAA,CAAAC,4BAAA,cAAqB;;AAAA,AACE,yCAAA,zCAAM6E;;AACN,8DAAA,9DAAC5F,WAAcoC;;AAFjB;;;;AAArBtB;AAIAG;;AAEJ,2DAAA,3DAAM8C,8HAAuC9C;AAA7C,AACE,GAAA,AAAA7D,cAAQ,oBAAA,pBAACC;AACP,IAAMI,WAAS,AAACsF;AAAhB,AASE,AAACF,qCAAkBpF;;AACnB,IAAAuG,iBAAA;IAAAC,iBAAA;IAAAC,iBAA8B,AAACC;AAA/B,AAAA,mEAAAH,eAAAC,eAAAC,8BAAAF,eAAAC,eAAAC,5JAACjD,kCAAAA,gFAAAA;;AAGD,sJAAA,/IAACjB,WAAc,AAACvB,gDAAQwB,0EAAuDxC;;AACjF,QAACwD,kCAAAA,oCAAAA;;;AAIL,oCAAA,pCAAMvC,gFAAqBG,mBAAmBT;AAA9C,AACE,IAAM0E,QAAM,+GAAA,gBAAA,7GAAI,eAAA,fAACvE,8DAAOH,UAASS;oLACtBiE,MAAM,6CAAK1E,vOADtB,AAAA,0FAAA,OAAA;;AAGF,qCAAA,rCAAMiE,kFAAsBxD,mBAAmBrB;yDAC3B,sGAAiD,AAAA,lJAAtD,kOAA4DA,tLAAtDiB,gDAAQC,zGAA3B,aAAcC,TAARC,uIAAyCC,3IADjD;IAEQqC,SAAE;kBAAKC,MAAMC;AAAX,AAAA,+OAEG,AAACyC,+CAAO,AAAC5B,iBAAOd,OAAO,AAACc,iBAAOb,7OAD/B,qEAAA,xBAAK,AAAC+B,gBAAMhC,wDAAW,AAACgC,gBAAM/B;;;AAFzC,AAIE,6DAAW+B,gBAAMvE,QAAQ,/BAAjBsC,8CAAuBtC,7FAA9B4H,sDAAS,wBAAgBC;;AAE9B,AAAA,qCAAA,6CAAApH,lFAAM2D;AAAN,AAAA,IAAA1D,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAA0D,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAvD;;;AAAA,AAAA,AAAA,AAAAuD,0EAAA,WAAuBnE,mBAAmBrB,eAAegG,IAAMC;AAC7D,IAAAnB,aAA2B,AAACD,mCAAqBxD,mBAAmBrB,vEADtE;cACE,AAAA+E,4CAAAD,WAAA,IAAA,rEAAOE;iBAAP,AAAAD,4CAAAD,WAAA,IAAA,xEAAeG;AAAf,AACE,OAACsB,yDAAsC;;mCAAKO,QAAUD;YACAD,oXAA8C3B,5XAArDtF,iJAAe,kDAAA,gIAA+BsG,3TAAxC,sDAAA,yUAA0DY,3YAAtE,uPAAkC7B,qDAAQ8B,1GAAhBd,lMAD5B;IAEQvG,UAAQ,CAACgC,6DAAAA,+DAAAA;AACb,OAAQ,AAAQhC,mBAASA,QAAQ,AAACC,mDAAWC,rFAF/C;;yBADGmH;IAAUD;;;;EAAAA;;oCAAVC,QAAUD;;;IAAVC;IAAUD;0BAAVC,QAAUD;;;;;;;;;AAF1D,AAAA,AAAArB,6DAAA;;AAAA;AAAA,AAAA,AAAAA,uDAAA,WAAAC;AAAA,AAAA,IAAAC,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAOA,+CAAA,/CAAM3F,sGAA2BC,oBAAoBC,1HAPrD;AAOA,AACE,GAAA,AAAAJ,cAAQ,oBAAA,pBAACC;AAEL,IAAMmD,SAAO,CAAA,dADf;kHAEwDA,nCAAnCjD,yHAAyD,6BAAegD,9NAAxFc,iMAA0Ef,rGAAtC9C,wEAAsBiD,3KAA3D,AADF;;AAGF,4DAAA,rDAAMsE;;;AAIV,8CAAA,9CAAMR,oGAA0B5H,SAAS6B;AAAzC,AACE,IAAMH,WAAS,AAACiC;AACd,IAAAwF,aAAA,AAAAhG,cAAgBnD,/BADlB;IACEoJ,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,cAAA,AAAAD,kDAAAE,5DAAQ7H;AACN,GAAA,AAAAhB,cAAQ,eAAA,fAACmB,8DAAOH,UAASI,zFAD3B,AAAA;AAEI,AAAO,CAACS,6DAAAA,+DAAAA,8CAAqB,CAAC4G,kEAAAA,mGAAAA,nCAAoBzH,+EAAAA,vEAAQI,+EAAAA,hEAAeH,+EAAAA;;AAD3E;;AADF;AAAA,eAAAyH;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAApG,cAAAgG;AAAA,AAAA,GAAAI;AAAA,AAAA,IAAAJ,iBAAAI;AAAA,AAAA,GAAA,AAAAC,6BAAAL;AAAA,IAAAM,kBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,cAAA,AAAAjD,gBAAA2C,1BAAQ1H;AACN,GAAA,AAAAhB,cAAQ,eAAA,fAACmB,8DAAOH,UAASI,zFAD3B,AAAA;AAEI,AAAO,CAACS,6DAAAA,+DAAAA,8CAAqB,CAAC4G,kEAAAA,mGAAAA,nCAAoBzH,+EAAAA,vEAAQI,+EAAAA,hEAAeH,+EAAAA;;AAD3E;;AADF;AAAA,eAAA,AAAA+E,eAAA0C;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAIJ,wCAAA,xCAAMpF,wFAAmBlC,eAAeJ;AACtC,OAACE,mBAAQ,eAAA,fAACC,8DAAOH,UAASI,lGAD5B;;AAGA,uCAAA,vCAAMkE,sFAAwBtE;AAC5B,IAAAsD,WAAMtD,fADR;8DAwiB0C,AAAAsD,1DAviBxCA,eAAA,EAAA,CAAAA,oBAAAzD,iCAAA;AAAA,AAAA,QAAAyD;KAAA;AAAA;;;KAAA;AAAA;;;;AAGEtD;;;;AAEJ,wCAAA,xCAAMxB,wFAAyBD;AAA/B,AACE,OAACgC,4CAAI+D,qCAAuB/F;;AAE9B,yCAAA,zCAAMiH,0FAAqBjH,SAASa;AAClC,IAAMgB,iBAAe,AAAA,gFAAMhB,rGAD7B;IAEQb,eAAS,AAACC,sCAAwBD;AADxC,AAEE,AAAC4H,4CAAyB5H,aAAS6B;;AACnC,OAACyG,+CAAO,AAACxG,gDAAQiC,sCAAkBlC,gBAAgB7B;;AAEvD,uCAAA,vCAAMkE,sFAAmB3C,cAAcV;sEAEf,0BAAAS,zBAAUC,tCAAf,iBAAAC,lDAFnB,AACE,IAAMxB,WAAS;AACE,AAAA,GAAAwB;QAA+BD,8CAAAA,8DAAAA,lBAAcV,0CAAAA,5IAAf;;AAA9BW;;OAA+DD,8CAAAA,8DAAAA,7GAAD,2FAAeV,0CAAAA,mBAC7E,kBAAA,jBAAMU,wBAAe,AAAA,0FAAUV,kBAC/B,AAACmF,yBAASzE,gBAAeA,hLAH3B,qIAAA,yDAAA,AAAA,mFAISA;;AAJxB,AAKE,OAAC0F,uCAAoBjH,SAASa;;AAIlC,4CAAA,5CAAMoD;AACJ,GAAA,AAAAxD,cAAQ,oBAAA,pBAACC,jBADX;AAEI,QAAM,iBAAAR,qBAAA,8JAAA,7JAAM,CAACG,0DAAAA,4DAAAA;AAAP,AAAA,oBAAAH;AAAA,IAAA0E,SAAA1E;AAAA,AAAA,QAAA0E,OAAA;;AAAA;;QAAN;;AADF;;;AAGF,+DAAA,/DAAMmE;AACJ,GAAA,AAAAtI,cAAQ,oBAAA,pBAACC,jBADX;AAEI,IAAMmD,SAAO,CAAA,iJAAA,9CAA4DgB;mQACW,5PAA3E,4PAA4ElB,vDAA5BC,5MAAvD,yLAAA,uGAAiGA,9GAApEC,1KAArBvB,6DAAAA,+DAAAA,kGAA2DwB,tOADrE;;AADF;;;AAMF,sCAAA,tCAAMgE,oFAAkBrG,QAAQb,oBAAoBmH,aAAaC;AAAjE,AACE,oBAAI,eAAA,fAACpG,8DAAOH,UAASb;AACnB,oBAAI,iBAAA+D,mBAAI,oBAAA,pBAACjE;AAAL,AAAA,oBAAAiE;AAAAA;;AAA6C,QAACoD,6CAAAA,sDAAAA,XAAatG,kCAAAA;;;AAC7D,QAACuG,2CAAAA,6CAAAA;;AACD,OAAO,CAAC1F,6DAAAA,+DAAAA,8CAAqB,CAAC2C,wEAAAA,iFAAAA,XAA0BxD,6DAAAA;;;AAH5D","names":["cljs.core/empty?","user-agent","features","devtools.util/convert-legacy-features","temp__5455__auto__","node-info","devtools.util/get-node-info","devtools.context/get-root","console","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","items","cljs.core/not","devtools.prefs/pref","devtools.util/display-banner-if-needed!","features-to-install","feature-groups","detector","_object","_config","new-formatters","p1__29416#","current-formatters","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","devtools.util/*custom-formatters-warning-reported*","cljs.core/Keyword","features-desc","and__3911__auto__","feature","lib-info","cljs.core/boolean","cljs.core/some","known-features","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.util/feature-for-display","cljs.core.map.cljs$core$IFn$_invoke$arity$2","labels","installed-features","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.pprint/pprint","args","devtools.context/get-console","msg","devtools.util.pprint_str.cljs$core$IFn$_invoke$arity$variadic","diff","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","devtools.util/pprint-str","seq29394","self__4487__auto__","cljs.core/seq","devtools.util/custom-formatters-not-active-msg","js/setTimeout","devtools.util/uninstall-detector-and-check-custom-formatters-active!","devtools.util/formatter-key","formatters","platform","process","devtools.util/get-lib-info","devtools.util/reset-style","banner","devtools.util/lib-info-style","devtools.util/is-known-feature?","devtools.util/get-js-context-description","devtools.util/under-advanced-build?","devtools.util/resolve-features!","G__29421","target__27694__auto__","js/Error","f","*","accum","val","devtools.util.display_banner_BANG_.cljs$core$IFn$_invoke$arity$variadic","or__3922__auto__","o29469","devtools.util/advanced-build-explanation-url","version","G__29467","_","devtools.util/feature-not-available-msg","clojure.data/diff","cljs.core/deref","devtools.prefs/default-config","devtools.prefs/get-prefs","cljs.core/second","devtools.util/make-version-info","cljs.core/constantly","devtools.util/check-custom-formatters-active!","devtools.util/feature-list-display","vec__29442","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","fmt-str","fmt-params","devtools.util/convert-legacy-feature","cljs.core/seqable?","devtools.util/set-formatters-safe!","devtools.util/install-detector!","color","devtools.util/make-detector","devtools.util/display-banner!","seq29438","G__29439","cljs.core/first","cljs.core/next","G__29440","G__29441","self__4486__auto__","fmt","params","devtools.util/in-node-context?","devtools.util/CustomFormattersDetector","devtools.util/sanititze-features!","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","devtools.util/get-formatters-safe","devtools.util/wrap-with-custom-formatter-detection!","G__29427","G__29428","G__29429","devtools.util/make-detection-printer","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","add-args","add-fmt","devtools.util/report-unknown-features!","cljs.core/array?","devtools.util/install-feature!","available-fn","install-fn","devtools.util/uninstall-detector!","e29410","root","devtools.util/*custom-formatters-active*","goog.userAgent/getUserAgentString","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","sb__4430__auto__","js/goog.string.StringBuffer","*print-newline*29398","cljs.core/*print-newline*","*print-fn*29399","cljs.core/*print-fn*","x__4431__auto__","devtools.util/make-lib-info","devtools.util/display-advanced-build-warning-if-needed!","devtools.util/print-config-overrides-if-requested!","devtools.util/*console-open*","devtools.util/unknown-feature-msg","seq__29451","chunk__29452","count__29453","i__29454","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/rest","devtools.util/get-node-description","*print-level*29400","cljs.core/*print-level*","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","devtools.util/->CustomFormattersDetector"],"sourcesContent":["(ns devtools.util\n  (:require-macros [devtools.oops :refer [oget ocall oset unchecked-aget unchecked-aset]]\n                   [devtools.compiler :refer [check-compiler-options!]])\n  (:require [goog.userAgent :as ua]\n            [clojure.data :as data]\n            [devtools.version :refer [get-current-version]]\n            [devtools.context :as context]\n            [cljs.pprint :as cljs-pprint]\n            [devtools.prefs :as prefs]))\n\n; cljs.pprint does not play well in advanced mode :optimizations, see https://github.com/binaryage/cljs-devtools/issues/37\n(check-compiler-options!)\n\n(def lib-info-style \"color:black;font-weight:bold;\")\n(def reset-style \"color:black\")\n(def advanced-build-explanation-url\n  \"https://github.com/binaryage/cljs-devtools/blob/master/docs/faq.md#why-custom-formatters-do-not-work-for-advanced-builds\")\n\n(def ^:dynamic *custom-formatters-active* false)\n(def ^:dynamic *console-open* false)\n(def ^:dynamic *custom-formatters-warning-reported* false)\n\n; -- general helpers --------------------------------------------------------------------------------------------------------\n\n(defn pprint-str [& args]\n  (with-out-str\n    (binding [*print-level* 300]\n      (apply cljs-pprint/pprint args))))\n\n; -- version helpers --------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic make-version-info []\n  (str (get-current-version)))\n\n(defn ^:dynamic make-lib-info []\n  (str \"CLJS DevTools \" (make-version-info)))\n\n(defn get-lib-info []\n  (make-lib-info))\n\n; -- node.js support --------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic get-node-info [root]\n  (try\n    (let [process (oget root \"process\")\n          version (oget process \"version\")\n          platform (oget process \"platform\")]\n      (if (and version platform)\n        {:version  version\n         :platform platform}))\n    (catch :default _\n      nil)))\n\n(defn ^:dynamic get-node-description [node-info]\n  (str (or (:platform node-info) \"?\") \"/\" (or (:version node-info) \"?\")))\n\n(defn ^:dynamic in-node-context? []\n  (some? (get-node-info (context/get-root))))\n\n; -- javascript context utils -----------------------------------------------------------------------------------------------\n\n(defn ^:dynamic get-js-context-description []\n  (if-let [node-info (get-node-info (context/get-root))]\n    (str \"node/\" (get-node-description node-info))\n    (let [user-agent (ua/getUserAgentString)]\n      (if (empty? user-agent)\n        \"<unknown context>\"\n        user-agent))))\n\n; -- message formatters -----------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic unknown-feature-msg [feature known-features lib-info]\n  (str \"No such feature \" feature \" is currently available in \" lib-info \". \"\n       \"The list of supported features is \" (pr-str known-features) \".\"))\n\n(defn ^:dynamic feature-not-available-msg [feature]\n  (str \"Feature \" feature \" cannot be installed. \"\n       \"Unsupported Javascript context: \" (get-js-context-description) \".\"))\n\n(defn ^:dynamic custom-formatters-not-active-msg []\n  (str \"CLJS DevTools: some custom formatters were not rendered.\\n\"\n       \"https://github.com/binaryage/cljs-devtools/blob/master/docs/faq.md#why-some-custom-formatters-were-not-rendered\"))\n\n; -- devtools formatters access ---------------------------------------------------------------------------------------------\n\n(def formatter-key \"devtoolsFormatters\")\n\n(defn get-formatters-safe []\n  (let [formatters (unchecked-aget (context/get-root) formatter-key)]\n    (if (array? formatters)                                                                                                   ; TODO: maybe issue a warning if formatters are anything else than array or nil\n      formatters\n      #js [])))\n\n(defn set-formatters-safe! [new-formatters]\n  {:pre [(or (nil? new-formatters) (array? new-formatters))]}\n  (unchecked-aset (context/get-root) formatter-key (if (empty? new-formatters) nil new-formatters)))\n\n(defn print-config-overrides-if-requested! [msg]\n  (when (prefs/pref :print-config-overrides)\n    (let [diff (second (data/diff @prefs/default-config (prefs/get-prefs)))]\n      (if-not (empty? diff)\n        (.info (context/get-console) msg (pprint-str diff))))))\n\n; -- custom formatters detection --------------------------------------------------------------------------------------------\n\n(deftype CustomFormattersDetector [])\n\n; https://github.com/binaryage/cljs-devtools/issues/16\n(defn make-detector []\n  (let [detector (CustomFormattersDetector.)]\n    (unchecked-aset detector \"header\" (fn [_object _config]\n                                        (set! *custom-formatters-active* true)\n                                        nil))\n    (unchecked-aset detector \"hasBody\" (constantly false))\n    (unchecked-aset detector \"body\" (constantly nil))\n    detector))\n\n(defn install-detector! [detector]\n  (let [formatters (get-formatters-safe)]\n    (.push formatters detector)\n    (set-formatters-safe! formatters)))\n\n(defn uninstall-detector! [detector]\n  ; play it safe here, this method is called asynchronously\n  ; in theory someone else could have installed additional custom formatters\n  ; we have to be careful removing only ours formatters\n  (let [current-formatters (unchecked-aget (context/get-root) formatter-key)]\n    (if (array? current-formatters)\n      (let [new-formatters (.filter current-formatters #(not (= detector %)))]\n        (set-formatters-safe! new-formatters)))))\n\n(defn check-custom-formatters-active! []\n  (if (and *console-open* (not *custom-formatters-active*))\n    (when-not *custom-formatters-warning-reported*\n      (set! *custom-formatters-warning-reported* true)\n      (.warn (context/get-console) (custom-formatters-not-active-msg)))))\n\n(defn uninstall-detector-and-check-custom-formatters-active! [detector]\n  (uninstall-detector! detector)\n  (check-custom-formatters-active!))\n\n; a variation of http://stackoverflow.com/a/30638226/84283\n(defn make-detection-printer []\n  (let [f (fn [])]\n    (oset f [\"toString\"] (fn []\n                           (set! *console-open* true)\n                           (js/setTimeout check-custom-formatters-active! 0)                                                  ; console is being opened, schedule another check\n                           \"\"))\n    f))\n\n(defn wrap-with-custom-formatter-detection! [f]\n  (if-not (prefs/pref :dont-detect-custom-formatters)\n    (let [detector (make-detector)]\n      ; this is a tricky business here\n      ; we cannot ask DevTools if custom formatters are available and/or enabled\n      ; we abuse the fact that we are printing info banner upon cljs-devtools installation anyways\n      ; we install a special CustomFormattersDetector formatter which just records calls to it\n      ; but does not format anything, it skips the opportunity to format the output so it has no visual effect\n      ; this way we are able to detect if custom formatters are active and record it in *custom-formatters-active*\n      ; but this technique does not work when printing happens when DevTools console is closed\n      ; we have to add another system for detection of when console opens and re-detect custom formatters with opened console\n      (install-detector! detector)\n      (f \"%c%s\" \"color:transparent\" (make-detection-printer))\n      ; note that custom formatters are applied asynchronously\n      ; we have to uninstall our detector a bit later\n      (js/setTimeout (partial uninstall-detector-and-check-custom-formatters-active! detector) 0))\n    (f)))\n\n; -- banner -----------------------------------------------------------------------------------------------------------------\n\n(defn feature-for-display [installed-features feature]\n  (let [color (if (some #{feature} installed-features) \"color:#0000ff\" \"color:#ccc\")]\n    [\"%c%s\" [color (str feature)]]))\n\n(defn feature-list-display [installed-features feature-groups]\n  (let [labels (map (partial feature-for-display installed-features) (:all feature-groups))\n        * (fn [accum val]\n            [(str (first accum) \" \" (first val))\n             (concat (second accum) (second val))])]\n    (reduce * (first labels) (rest labels))))\n\n(defn display-banner! [installed-features feature-groups fmt & params]\n  (let [[fmt-str fmt-params] (feature-list-display installed-features feature-groups)]\n    (wrap-with-custom-formatter-detection! (fn [add-fmt & add-args]\n                                             (let [items (concat [(str fmt \" \" fmt-str add-fmt)] params fmt-params add-args)\n                                                   console (context/get-console)]\n                                               (.apply (.-info console) console (into-array items)))))))\n\n(defn display-banner-if-needed! [features-to-install feature-groups]\n  (if-not (prefs/pref :dont-display-banner)\n    (do\n      (let [banner (str \"Installing %c%s%c and enabling features\")]\n        (display-banner! features-to-install feature-groups banner lib-info-style (get-lib-info) reset-style)))\n    ; detection cannot be performed if we are not allowed to print something to console => assume active\n    (set! *custom-formatters-active* true)))\n\n; -- unknown features -------------------------------------------------------------------------------------------------------\n\n(defn report-unknown-features! [features known-features]\n  (let [lib-info (get-lib-info)]\n    (doseq [feature features]\n      (if-not (some #{feature} known-features)\n        (.warn (context/get-console) (unknown-feature-msg feature known-features lib-info))))))\n\n(defn is-known-feature? [known-features feature]\n  (boolean (some #{feature} known-features)))\n\n(defn convert-legacy-feature [feature]\n  (case feature\n    :custom-formatters :formatters\n    :sanity-hints :hints\n    feature))\n\n(defn convert-legacy-features [features]\n  (map convert-legacy-feature features))\n\n(defn sanititze-features! [features feature-groups]\n  (let [known-features (:all feature-groups)\n        features (convert-legacy-features features)]                                                                          ; new feature names were introduced in v0.8\n    (report-unknown-features! features known-features)\n    (filter (partial is-known-feature? known-features) features)))\n\n(defn resolve-features! [features-desc feature-groups]\n  (let [features (cond\n                   (and (keyword? features-desc) (features-desc feature-groups)) (features-desc feature-groups)\n                   (nil? features-desc) (:default feature-groups)\n                   (seqable? features-desc) features-desc\n                   :else [features-desc])]\n    (sanititze-features! features feature-groups)))\n\n; -- advanced mode check ----------------------------------------------------------------------------------------------------\n\n(defn under-advanced-build? []\n  (if-not (prefs/pref :disable-advanced-mode-check)\n    (nil? (oget (context/get-root) \"devtools\" \"version\"))))                                                                   ; we rely on the fact that under advanced mode the namespace will be renamed\n\n(defn display-advanced-build-warning-if-needed! []\n  (if-not (prefs/pref :dont-display-advanced-build-warning)\n    (let [banner (str \"%cNOT%c installing %c%s%c under advanced build. See \" advanced-build-explanation-url \".\")]\n      (.warn (context/get-console) banner \"font-weight:bold\" reset-style lib-info-style (get-lib-info) reset-style))))\n\n; -- installer --------------------------------------------------------------------------------------------------------------\n\n(defn install-feature! [feature features-to-install available-fn install-fn]\n  (if (some #{feature} features-to-install)\n    (if (or (prefs/pref :bypass-availability-checks) (available-fn feature))\n      (install-fn)\n      (.warn (context/get-console) (feature-not-available-msg feature)))))\n"]}