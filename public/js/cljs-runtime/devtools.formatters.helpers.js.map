{"version":3,"file":"devtools.formatters.helpers.js","sources":["devtools/formatters/helpers.cljs"],"mappings":"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","names":["vec__28665","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","well-known-types","devtools.formatters.helpers/pref","value","actual-count","cljs.core/bounded-count","min-count","obj","v","cljs.core/not","devtools.formatters.helpers/is-js-symbol?","prefix","string","prefix-limit","devtools.formatters.helpers/is-prototype?","o","and__3911__auto__","devtools.formatters.helpers/cljs-instance?","cljs.core/contains?","fully-qualified-type-name","devtools.formatters.helpers/fetch-fields-values","fields","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog/typeOf","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.formatters.helpers/fetch-field-value","devtools.formatters.helpers/abbreviate-long-string","marker","postfix-limit","postfix","temp__5455__auto__","devtools.formatters.helpers/instance-of-a-well-known-type?","args-close-symbol","devtools.formatters.helpers/cljs-value?","devtools.formatters.helpers/expandable?","devtools.formatters.helpers/get-constructor","devtools.formatters.helpers/cljs-type?","devtools.formatters.helpers/cljs-land-value?","render-pref","default-check","devtools.formatters.helpers/directly-printable?","field","cljs.core/munge","devtools.formatters.helpers/get-prototype","devtools.formatters.helpers/has-formatting-protocol?","devtools.formatters.helpers/should-render?","pref-key","or__3922__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","_e__27696__auto__","e28646","cljs.core/IPrintWithWriter","more-count","cljs.core/fn?","e28650","devtools.format/IDevtoolsFormat","devtools.formatters.helpers/get-more-marker","cljs.core/empty?","f","devtools.formatters.helpers/bool?","devtools.munging/cljs-fn?","devtools.formatters.helpers/wrap-arity","arity","cljs.core/var?","e28652","devtools.protocols/IFormat","constructor-fn","goog/isObject","devtools.formatters.helpers/abbreviated?","template","devtools.formatters.helpers/cljs-function?","ns","name","devtools.prefs/pref","p1__28668#","cljs.core/some","args-open-symbol","cljs.core/ISeqable","devtools.munging/parse-constructor-info","devtools.formatters.helpers/should-render-instance?","cljs.core/Keyword"],"sourcesContent":["(ns devtools.formatters.helpers\n  (:require-macros [devtools.oops :refer [oget safe-call]])\n  (:require [devtools.prefs :as prefs]\n            [devtools.munging :as munging]\n            [devtools.format :refer [IDevtoolsFormat]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]))\n\n(defn pref [v]\n  (if (keyword? v)\n    (recur (prefs/pref v))\n    v))\n\n(defn get-prototype [o]\n  (.-prototype o))\n\n(defn get-constructor [o]\n  (.-constructor o))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn is-prototype? [o]\n  (identical? (get-prototype (get-constructor o)) o))\n\n(defn is-js-symbol? [o]\n  (= (goog/typeOf o) \"symbol\"))\n\n(defn cljs-function? [value]\n  (and (not (pref :disable-cljs-fn-formatting))                                                                               ; TODO: this should be deprecated\n       (not (var? value))                                                                                                     ; HACK: vars have IFn protocol and would act as functions TODO: implement custom rendering for vars\n       (munging/cljs-fn? value)))\n\n(defn has-formatting-protocol? [value]\n  (or (safe-call satisfies? false IPrintWithWriter value)\n      (safe-call satisfies? false IDevtoolsFormat value)                                                                      ; legacy\n      (safe-call satisfies? false IFormat value)))\n\n; IRC #clojurescript @ freenode.net on 2015-01-27:\n; [13:40:09] darwin_: Hi, what is the best way to test if I'm handled ClojureScript data value or plain javascript object?\n; [14:04:34] dnolen: there is a very low level thing you can check\n; [14:04:36] dnolen: https://github.com/clojure/clojurescript/blob/c2550c4fdc94178a7957497e2bfde54e5600c457/src/clj/cljs/core.clj#L901\n; [14:05:00] dnolen: this property is unlikely to change - still it's probably not something anything anyone should use w/o a really good reason\n(defn cljs-type? [f]\n  (and (goog/isObject f)                                                                                                      ; see http://stackoverflow.com/a/22482737/84283\n       (not (is-prototype? f))\n       (.-cljs$lang$type f)))\n\n(defn cljs-instance? [value]\n  (and (goog/isObject value)                                                                                                  ; see http://stackoverflow.com/a/22482737/84283\n       (cljs-type? (get-constructor value))))\n\n(defn cljs-land-value? [value]\n  (or (cljs-instance? value)\n      (has-formatting-protocol? value)))                                                                                      ; some raw js types can be extend-protocol to support cljs printing, see issue #21\n\n(defn cljs-value? [value]\n  (and\n    (or (cljs-land-value? value)\n        (cljs-function? value))\n    (not (is-prototype? value))\n    (not (is-js-symbol? value))))\n\n(defn bool? [value]\n  (or (true? value) (false? value)))\n\n(defn instance-of-a-well-known-type? [value]\n  (let [well-known-types (pref :well-known-types)\n        constructor-fn (get-constructor value)\n        [ns name] (munging/parse-constructor-info constructor-fn)\n        fully-qualified-type-name (str ns \"/\" name)]\n    (contains? well-known-types fully-qualified-type-name)))\n\n(defn should-render-instance? [value]\n  (and (cljs-instance? value)\n       (not (instance-of-a-well-known-type? value))))\n\n(defn directly-printable? [value]\n  (or (string? value)\n      (number? value)\n      (bool? value)))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn abbreviated? [template]\n  (some #(= (pref :more-marker) %) template))\n\n(defn abbreviate-long-string [string marker prefix-limit postfix-limit]\n  (let [prefix (.slice string 0 prefix-limit)\n        postfix (.slice string (- (.-length string) postfix-limit))]\n    (str prefix marker postfix)))\n\n(defn get-more-marker [more-count]\n  (str (pref :plus-symbol) more-count (pref :more-symbol)))\n\n(defn wrap-arity [arity]\n  (let [args-open-symbol (pref :args-open-symbol)\n        args-close-symbol (pref :args-close-symbol)]\n    (str args-open-symbol arity args-close-symbol)))\n\n(defn fetch-field-value [obj field]\n  [field (oget obj (munge field))])\n\n(defn fetch-fields-values [obj fields]\n  (map (partial fetch-field-value obj) fields))\n\n(defn expandable? [obj]\n  (if (satisfies? ISeqable obj)\n    (if-let [min-count (pref (if (instance-of-a-well-known-type? obj)\n                               :min-expandable-sequable-count-for-well-known-types\n                               :min-expandable-sequable-count))]\n      (if-not (empty? obj)\n        (let [actual-count (bounded-count min-count obj)]\n          (>= actual-count min-count))))))\n\n(defn should-render? [pref-key value default-check]\n  (if-let [render-pref (pref pref-key)]\n    (cond\n      (true? render-pref) (default-check value)\n      (fn? render-pref) (render-pref value))))\n"]}