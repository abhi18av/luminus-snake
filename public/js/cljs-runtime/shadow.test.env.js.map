{"version":3,"file":"shadow.test.env.js","sources":["shadow/test/env.cljs"],"mappings":";;AAMA,GAAA,OAASA;AAAT;AAAA,AAAA,AAASA,4BAAU,6CAAA,2CAAA,kEAAA,1JAACC;;AAEpB,oBAAU,AAAA,uFAAA,AAAAC,gBAAUF;AAApB;AAAA,AAKE,IAAMG,iBACA,WAAKC;AAAL,AACE,4GAAA,rGAACC,0DAAML,0BAAUM,mFAAmBC,mEAAOH;;AAFnD,AAIE,GAAA,AAAAI,cAAQC;AACN,8BAAA,9BAAMA,iHAAgCN;;AACtC,AAAMM,8BAA+B,AAACC,6CAAKD,4BAA+BN;;;AAC5E,6FAAA,yDAAA,tJAACQ,mDAAMX,0BAAUY;;AAErB,gCAAA,hCAAMC,wEAAeC,QAAQC,UAAUC;AAAvC,AAEE,gGAAA,mFAAA,0EAAA,7PAACL,mDAAMX,0BAAUiB,wKAAsBH,8DAAcC,kBAAWC;;AAChEA;;AAEF,oCAAA,pCAAME,gFAAmBJ,QAAQK,KAAKC;AAAtC,AACE,uGAAA,mFAAA,0EAAA,7PAACT,mDAAMX,0BAAUiB,wKAAsBH,qEAAkBK,aAAMC;;AAEjE,4BAAA,5BAAMC;AAAN,AACE,mDAAA,AAAAnB,2CAAA,vFAACoB,4DAAKtB;;AAER,mCAAA,nCAAMwB,8EAAkBpB;AAAxB,AAAA,GACS,eAAAqB,dAASrB;AADlB;AAAA,AAAA,MAAA,KAAAmB,MAAA;;;AAEE,sDAAA,AAAArB,2CAAA,mFAAA,7KAACwB,+DAAQ1B,gLAAuBI;;AAElC;;;;sCAAA,tCAAMuB;AAAN,sIAIO3B,hHAAU,AAAA,gGAAA,AAAAE,tHAAc,OAAC0B;;AAEhC,iCAAA,jCAAMC;AAAN,2EACO,iBAAAC,qBAAA,uDAAAC,xKAEA,uEAAA,hEAAC2B,+CAAOC;AAFR,AAAA,YAAA3B,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA2yE4C,AAAAwB,sBAAA7B;IA3yE5CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,6CAAAP,gBAAAK;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAE,gCAAA,AAAAF,+BAAA,KAAA,OAAA,QAAA,AAAAG,8CAAAC,mBAAAJ,YAAAA;cAAAA,VAAwB5B;WAAxB,AAAAQ,4CAAAoB,eAAA,lEAAcc;AAAd,AAAA,AAAA,AAAAT,uBAAAR,SACE,AAACD,gBAAMkB;;AADT,eAAA,CAAAf,WAAA;;;;AAAA;;;;;AAAA,OAAAO,qBAAA,AAAAC,gBAAAV,UAAA,AAAAW,6CAAA,AAAAC,qBAAApB;;AAAA,OAAAiB,qBAAA,AAAAC,gBAAAV,UAAA;;;AAAA,IAAAa,aAAA,AAAAC,gBAAAtB;IAAAqB,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAR,gCAAA,AAAAQ,+BAAA,KAAA,OAAA,QAAA,AAAAP,8CAAAC,mBAAAM,YAAAA;cAAAA,VAAwBtC;WAAxB,AAAAQ,4CAAA8B,eAAA,lEAAcI;AAAd,AAAA,OAAAF,qCAAA,AAAAJ,6CAAA,AAAAK,eAAAxB,lFACE,AAACO,gBAAMkB;;;AADT;;;;GAAA,KAAA;;AAAA,AAAA,OAAA1B,kJAAsC9B,hHAAU,AAAA,gGAAA,AAAAE,/GAAc,AAACuD","names":["shadow.test.env/tests-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","event-fn","ns","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/dissoc","cljs.core/not","js/goog.global.SHADOW_NS_RESET","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","shadow.test.env/register-test","test-ns","test-name","test-var","cljs.core/assoc-in","shadow.test.env/register-fixtures","type","fix","shadow.test.env/get-tests","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/Error","shadow.test.env/get-test-ns-info","cljs.core/Symbol","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","shadow.test.env/get-test-namespaces","cljs.core/keys","shadow.test.env/get-test-count","iter__4292__auto__","s__26067","cljs.core/LazySeq","temp__5457__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4290__auto__","size__4291__auto__","cljs.core/count","b__26069","cljs.core/chunk-buffer","i__26068","map__26070","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26066","cljs.core/chunk-rest","map__26073","cljs.core/first","cljs.core/cons","cljs.core/rest","vars","cljs.core/vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/+","cljs.core/chunk-first"],"sourcesContent":["(ns shadow.test.env)\n\n;; this should be how cljs.test works out of the box IMHO\n;; all those macros don't compose and make writing testing utilities painful\n;; (eg. you have to recompile the namespace containing the macro to pick up new tests)\n;; only the macros were replaced, the functionality remains unchanged\n(defonce tests-ref (atom {:namespaces {}}))\n\n(when-not (:hooked @tests-ref)\n  ;; we want to remove all tests when a ns is reloaded\n  ;; since otherwise deleted tests stay in the atom\n  ;; the event is dispatched by shadow.cljs.devtools.client.env\n  ;; right before the source is loaded\n  (let [event-fn\n        (fn [ns]\n          (swap! tests-ref update :namespaces dissoc ns))]\n\n    (if-not js/goog.global.SHADOW_NS_RESET\n      (set! js/goog.global.SHADOW_NS_RESET [event-fn])\n      (set! js/goog.global.SHADOW_NS_RESET (conj js/goog.global.SHADOW_NS_RESET event-fn)))\n    (swap! tests-ref assoc :hooked true)))\n\n(defn register-test [test-ns test-name test-var]\n  ;; register by name so reloading replaces the old test\n  (swap! tests-ref assoc-in [:namespaces test-ns :vars test-name] test-var)\n  test-var)\n\n(defn register-fixtures [test-ns type fix]\n  (swap! tests-ref assoc-in [:namespaces test-ns :fixtures type] fix))\n\n(defn get-tests []\n  (get @tests-ref :namespaces))\n\n(defn get-test-ns-info [ns]\n  {:pre [(symbol? ns)]}\n  (get-in @tests-ref [:namespaces ns]))\n\n(defn get-test-namespaces\n  \"returns all the registered test namespaces and symbols\n   use (get-test-ns-info the-sym) to get the details\"\n  []\n  (-> @tests-ref (:namespaces) (keys)))\n\n(defn get-test-count []\n  (->> (for [{:keys [vars] :as test-ns} (-> @tests-ref (:namespaces) (vals))]\n         (count vars))\n       (reduce + 0)))"]}