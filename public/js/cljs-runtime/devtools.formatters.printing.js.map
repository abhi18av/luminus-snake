{"version":3,"file":"devtools.formatters.printing.js","sources":["devtools/formatters/printing.cljs"],"mappings":"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","names":["p1__29411#","devtools.formatters.helpers/should-render?","value","cljs.core/meta","*print-level*29434","cljs.core/*print-level*","managed-print-level","job-fn","printer","writer","opts","group","devtools.formatters.printing/build-markup","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","obj","js/Error","f","fn-key","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","markup-db","or__3922__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","_e__27696__auto__","e29417","devtools.format/IDevtoolsFormat","devtools.formatters.helpers/directly-printable?","devtools.formatters.printing/markup?","e29419","devtools.protocols/IFormat","cljs.core/count","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","devtools.formatters.printing/TemplateWriter","devtools.formatters.printing/detect-edge-case-and-patch-it","default-impl","devtools.formatters.printing/wrap-group-in-meta-if-needed","cljs.core/-pr-writer","temp__5455__auto__","atomic-markup","devtools.formatters.printing.build_markup.cljs$core$IFn$_invoke$arity$variadic","devtools.formatters.printing/mark-as-markup","and__3911__auto__","cljs.core/not","devtools.formatters.printing/already-reference?","expandable-markup","devtools.formatters.state/push-object-to-current-history!","devtools.formatters.printing/alt-printer-job","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","args","map__29423","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","_","a","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","devtools.formatters.printing/managed-print","tag","devtools.formatters.state/get-managed-print-level","output-group","inner-writer","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","inner-opts","devtools.formatters.printing/wrap-group-in-circular-warning-if-needed","circular?","devtools.formatters.printing/post-process-printed-output","map__29412","p1__29433#","devtools.formatters.state/update-current-state!","devtools.formatters.state/set-managed-print-level","cljs.core/first","devtools.formatters.printing/wrap-group-in-reference-if-needed","devtools.formatters.printing/alt-printer-impl","devtools.prefs/pref","cljs.core/-write","surrogate-markup","devtools.formatters.printing/managed-print-via-protocol","devtools.formatters.printing/wrap-value-as-reference-if-needed","o","devtools.formatters.printing/make-template-writer","*current-state*29422","devtools.formatters.state/*current-state*","devtools.formatters.state/get-current-state","devtools.formatters.printing/managed-print-via-writer","reference-markup","cljs.core/pr-seq-writer","cljs.core/with-meta","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","devtools.formatters.printing/->TemplateWriter","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","seq29395","G__29396","cljs.core/next","G__29397","self__4486__auto__","devtools.formatters.state/is-circular?","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.formatters.helpers/expandable?","devtools.formatters.helpers/abbreviated?"],"sourcesContent":["(ns devtools.formatters.printing\n  (:require-macros [devtools.oops :refer [safe-call]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.format :refer [IDevtoolsFormat]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]\n            [devtools.formatters.state :refer [push-object-to-current-history! *current-state* get-current-state\n                                               is-circular? get-managed-print-level set-managed-print-level\n                                               update-current-state!]]\n            [devtools.formatters.helpers :refer [cljs-value? expandable? abbreviated? directly-printable? should-render?]]))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn markup? [value]\n  (::markup (meta value)))\n\n(defn mark-as-markup [value]\n  (with-meta value {::markup true}))\n\n(defn build-markup [markup-db fn-key & args]\n  (let [f (get markup-db fn-key)]\n    (assert f (str \"missing markup method in markup-db: \" fn-key))\n    (mark-as-markup (apply f args))))\n\n(defn wrap-value-as-reference-if-needed [markup-db value]\n  (if (or (directly-printable? value) (markup? value))\n    value\n    (build-markup markup-db :reference-surrogate value)))\n\n; -- TemplateWriter ---------------------------------------------------------------------------------------------------------\n\n(deftype TemplateWriter [^:mutable group markup-db]\n  Object\n  (merge [_ a] (set! group (concat group a)))\n  (get-group [_] group)\n  IWriter\n  (-write [_ o] (set! group (concat group [(wrap-value-as-reference-if-needed markup-db o)])))                                ; issue #21\n  (-flush [_] nil))\n\n(defn make-template-writer [markup-db]\n  (TemplateWriter. [] markup-db))\n\n; -- post-processing --------------------------------------------------------------------------------------------------------\n\n(defn already-reference? [group]\n  (if-let [tag (first (first group))]\n    (= tag \"reference\")))\n\n(defn wrap-group-in-reference-if-needed [group obj markup-db]\n  (if (and (not (already-reference? group))\n           (or (expandable? obj) (abbreviated? group)))\n    (let [expandable-markup (apply build-markup markup-db :expandable group)\n          surrogate-markup (build-markup markup-db :raw-surrogate obj expandable-markup :target)\n          reference-markup (build-markup markup-db :reference surrogate-markup)]\n      [reference-markup])\n    group))\n\n(defn wrap-group-in-circular-warning-if-needed [group markup-db circular?]\n  (if circular?\n    [(apply build-markup markup-db :circular-reference group)]\n    group))\n\n(defn wrap-group-in-meta-if-needed [group value markup-db]\n  (if (should-render? :render-metas value #(some? (meta %)))\n    [(apply (partial (:meta-wrapper markup-db) (meta value)) group)]\n    group))\n\n; default printer implementation can do this:\n;   :else (write-all writer \"#<\" (str obj) \">\")\n; we want to wrap stringified obj in a reference for further inspection\n;\n; this behaviour changed in https://github.com/clojure/clojurescript/commit/34c3b8985ed8197d90f441c46d168c4024a20eb8\n; newly functions and :else branch print \"#object [\" ... \"]\"\n;\n; in some situations obj can still be a clojurescript value (e.g. deftypes)\n; we have to implement a special flag to prevent infinite recursion\n; see https://github.com/binaryage/cljs-devtools/issues/2\n;     https://github.com/binaryage/cljs-devtools/issues/8\n(defn detect-edge-case-and-patch-it [group obj markup-db]\n  (cond\n    (or\n      (and (= (count group) 5) (= (nth group 0) \"#object[\") (= (nth group 4) \"\\\"]\"))                                          ; function case\n      (and (= (count group) 5) (= (nth group 0) \"#object[\") (= (nth group 4) \"]\"))                                            ; :else -constructor case\n      (and (= (count group) 3) (= (nth group 0) \"#object[\") (= (nth group 2) \"]\")))                                           ; :else -cljs$lang$ctorStr case\n    [(build-markup markup-db :native-reference obj)]\n\n    (and (= (count group) 3) (= (nth group 0) \"#<\") (= (str obj) (nth group 1)) (= (nth group 2) \">\"))                        ; old code prior r1.7.28\n    [(nth group 0) (build-markup :native-reference obj) (nth group 2)]\n\n    :else group))\n\n(defn post-process-printed-output [output-group obj markup-db circular?]\n  (-> output-group\n      (detect-edge-case-and-patch-it obj markup-db)                                                                           ; an ugly hack\n      (wrap-group-in-reference-if-needed obj markup-db)\n      (wrap-group-in-circular-warning-if-needed markup-db circular?)\n      (wrap-group-in-meta-if-needed obj markup-db)))\n\n; -- alternative printer ----------------------------------------------------------------------------------------------------\n\n(defn alt-printer-job [obj writer opts]\n  (let [{:keys [markup-db]} opts]\n    (if (or (safe-call satisfies? false IDevtoolsFormat obj)\n            (safe-call satisfies? false IFormat obj))                                                                         ; we have to wrap value in reference if detected IFormat\n      (-write writer (build-markup markup-db :reference obj))\n      (if-let [atomic-markup (build-markup markup-db :atomic obj)]\n        (-write writer atomic-markup)\n        (let [default-impl (:fallback-impl opts)\n              ; we want to limit print-level, at max-print-level level use maximal abbreviation e.g. [...] or {...}\n              inner-opts (if (= *print-level* 1) (assoc opts :print-length 0) opts)]\n          (default-impl obj writer inner-opts))))))\n\n(defn alt-printer-impl [obj writer opts]\n  (binding [*current-state* (get-current-state)]\n    (let [{:keys [markup-db]} opts\n          circular? (is-circular? obj)\n          inner-writer (make-template-writer (:markup-db opts))]\n      (push-object-to-current-history! obj)\n      (alt-printer-job obj inner-writer opts)\n      (.merge writer (post-process-printed-output (.get-group inner-writer) obj markup-db circular?)))))\n\n; -- common code for managed printing ---------------------------------------------------------------------------------------\n\n(defn managed-print [tag markup-db printer]\n  (let [writer (make-template-writer markup-db)\n        opts {:alt-impl     alt-printer-impl\n              :markup-db    markup-db\n              :print-length (pref :max-header-elements)\n              :more-marker  (pref :more-marker)}\n        job-fn #(printer writer opts)]\n    (if-let [managed-print-level (get-managed-print-level)]\n      (binding [*print-level* managed-print-level]\n        (update-current-state! #(set-managed-print-level % nil))                                                              ; reset managed-print-level so it does not propagate further down in expaded data\n        (job-fn))\n      (job-fn))\n    (concat [(pref tag)] (.get-group writer))))\n\n; -- public printing API ----------------------------------------------------------------------------------------------------\n\n(defn managed-print-via-writer [value tag markup-db]\n  (managed-print tag markup-db (fn [writer opts]\n                                 (pr-seq-writer [value] writer opts))))                                                       ; note we use pr-seq-writer becasue pr-writer is private for some reason\n\n(defn managed-print-via-protocol [value tag markup-db]\n  (managed-print tag markup-db (fn [writer opts]\n                                 (-pr-writer value writer opts))))\n"]}