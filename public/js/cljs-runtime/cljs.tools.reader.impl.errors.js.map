{"version":3,"file":"cljs.tools.reader.impl.errors.js","sources":["cljs/tools/reader/impl/errors.cljs"],"mappings":"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","names":["cljs.tools.reader.impl.errors/throw-eof-error","rdr","line","start","cljs.core/name","cljs.core/str","kind","cljs.tools.reader.impl.errors.eof_error.cljs$core$IFn$_invoke$arity$variadic","init","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.impl.errors/throw-bad-reader-tag","tag","n","col","seq","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","dups","cljs.tools.reader.impl.errors/throw-eof-at-dispatch","token","cljs.tools.reader.impl.inspect.inspect.cljs$core$IFn$_invoke$arity$1","expected","ns-name","cljs.tools.reader.impl.errors/throw-invalid-unicode-literal","cljs.tools.reader.reader-types/get-file-name","column","cljs.tools.reader.impl.errors/throw-feature-not-keyword","feature","ex-type","msg","cljs.tools.reader.impl.errors/throw-odd-map","elements","cljs.tools.reader.impl.errors/throw-invalid","cljs.tools.reader.impl.errors/throw-unknown-reader-tag","cljs.tools.reader.impl.errors.illegal_arg_error.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.impl.errors/throw-invalid-unicode-len","actual","cljs.core/count","cljs.tools.reader.impl.errors/throw-bad-metadata-target","target","cljs.tools.reader.impl.errors/duplicate-keys-error","coll","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","cljs.tools.reader.impl.errors/throw-eof-reading","seq30632","G__30633","cljs.core/first","cljs.core/next","G__30634","self__4486__auto__","cljs.tools.reader.impl.errors.throw_ex.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","msgs","ch","iter__4292__auto__","s__30658","cljs.core/LazySeq","temp__5457__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4290__auto__","size__4291__auto__","b__30660","cljs.core/chunk-buffer","i__30659","vec__30661","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30657","cljs.core/chunk-rest","vec__30664","cljs.core/cons","cljs.core/rest","id","freq","cljs.core/frequencies","cljs.tools.reader.impl.errors/throw-eof-at-start","details","G__30635","cljs.tools.reader.impl.errors/throw-dup-keys","ks","cljs.tools.reader.impl.errors/eof-error","seq30572","G__30573","cljs.tools.reader.impl.errors/throw-unmatch-delimiter","cljs.tools.reader.impl.errors/throw-invalid-character-literal","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.impl.errors/throw-bad-dispatch","msg1","file","cljs.tools.reader.impl.errors/throw-unsupported-character","G__30585","cljs.tools.reader.impl.errors/throw-eof-delimited","js/Error","msg2","cljs.tools.reader.impl.errors/ex-details","cljs.tools.reader.reader-types/get-column-number","duplicates","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","full-msg","cljs.tools.reader.impl.errors/throw-single-colon","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.tools.reader.impl.errors/throw-invalid-octal-len","cljs.tools.reader.impl.errors/throw-bad-escape-char","cljs.tools.reader.impl.errors/illegal-arg-error","seq30565","G__30566","cljs.tools.reader.impl.errors/throw-ex","seq30554","G__30555","G__30556","msg3","or__3922__auto__","cljs.tools.reader.reader-types/indexing-reader?","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit","cljs.tools.reader.impl.errors/throw-bad-char","cljs.tools.reader.impl.errors/throw-bad-ns","cljs.tools.reader.impl.errors.throw_eof_delimited.cljs$core$IFn$_invoke$arity$5","cljs.tools.reader.impl.errors/throw-eof-in-character","cljs.tools.reader.impl.errors/throw-no-dispatch","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token","cljs.core/Keyword","cljs.tools.reader.impl.errors/throw-invalid-number","cljs.tools.reader.impl.errors/reader-error","seq30560","G__30561","cljs.tools.reader.impl.errors/throw-invalid-unicode-char","cljs.tools.reader.impl.errors/throw-bad-octal-number","x","cljs.core/chunk-first","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.impl.errors/throw-ns-map-no-map","cljs.tools.reader.impl.errors/throw-invalid-unicode-escape","clojure.string/capitalize","cljs.tools.reader.impl.errors/throw-bad-metadata"],"sourcesContent":[";;   Copyright (c) Russ Olsen, Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.errors\n  (:require [cljs.tools.reader.reader-types :as types]\n            [clojure.string :as s]\n            [cljs.tools.reader.impl.inspect :as i]))\n\n(defn- ex-details\n  [rdr ex-type]\n  (let [details {:type :reader-exception\n                 :ex-kind ex-type}]\n    (if (types/indexing-reader? rdr)\n      (assoc\n       details\n       :file (types/get-file-name rdr)\n       :line (types/get-line-number rdr)\n       :col (types/get-column-number rdr))\n      details)))\n\n(defn- throw-ex\n  \"Throw an ex-info error.\"\n  [rdr ex-type & msg]\n  (let [details (ex-details rdr ex-type)\n        file (:file details)\n        line (:line details)\n        col (:col details)\n        msg1 (if file (str file \" \"))\n        msg2 (if line (str \"[line \" line \", col \" col \"]\"))\n        msg3 (if (or msg1 msg2) \" \")\n        full-msg (apply str msg1 msg2 msg3 msg)]\n    (throw (ex-info full-msg details))))\n\n(defn reader-error\n  \"Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided\"\n  [rdr & msgs]\n  (throw-ex rdr :reader-error (apply str msgs)))\n\n(defn illegal-arg-error\n  \"Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided\"\n  [rdr & msgs]\n  (throw-ex rdr :illegal-argument (apply str msgs)))\n\n(defn eof-error\n  \"Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided\"\n  [rdr & msgs]\n  (throw-ex rdr :eof (apply str msgs)))\n\n(defn throw-eof-delimited\n  ([rdr kind column line] (throw-eof-delimited rdr kind line column nil))\n  ([rdr kind line column n]\n   (eof-error\n    rdr\n    \"Unexpected EOF while reading \"\n    (if n\n      (str \"item \" n \" of \"))\n    (name kind)\n    (if line\n      (str \", starting at line \" line \" and column \" column))\n    \".\")))\n\n(defn throw-odd-map [rdr line col elements]\n  (reader-error\n   rdr\n   \"The map literal starting with \"\n   (i/inspect (first elements))\n   (if line (str \" on line \" line \" column \" col))\n   \" contains \"\n   (count elements)\n   \" form(s). Map literals must contain an even number of forms.\"))\n\n(defn throw-invalid-number [rdr token]\n  (reader-error\n   rdr\n   \"Invalid number: \"\n   token\n   \".\"))\n\n(defn throw-invalid-unicode-literal [rdr token]\n  (throw\n   (illegal-arg-error\n    rdr\n    \"Invalid unicode literal: \\\\\"\n    token\n    \".\")))\n\n(defn throw-invalid-unicode-escape [rdr ch]\n  (reader-error\n   rdr\n   \"Invalid unicode escape: \\\\u\"\n   ch\n   \".\"))\n\n(defn throw-invalid [rdr kind token]\n  (reader-error rdr \"Invalid \" (name kind) \": \" token \".\"))\n\n(defn throw-eof-at-start [rdr kind]\n  (eof-error rdr \"Unexpected EOF while reading start of \" (name kind) \".\"))\n\n(defn throw-bad-char [rdr kind ch]\n  (reader-error rdr \"Invalid character: \" ch \" found while reading \" (name kind) \".\"))\n\n(defn throw-eof-at-dispatch [rdr]\n  (eof-error rdr \"Unexpected EOF while reading dispatch character.\"))\n\n(defn throw-bad-dispatch [rdr ch]\n  (reader-error rdr \"No dispatch macro for \" ch \".\"))\n\n(defn throw-unmatch-delimiter [rdr ch]\n  (reader-error rdr \"Unmatched delimiter \" ch \".\"))\n\n(defn throw-eof-reading [rdr kind & start]\n  (let [init (case kind :regex \"#\\\"\" :string \\\")]\n    (eof-error rdr \"Unexpected EOF reading \" (name kind) \" starting \" (apply str init start) \".\")))\n\n(defn throw-no-dispatch [rdr ch]\n  (throw-bad-dispatch rdr ch))\n\n(defn throw-invalid-unicode-char[rdr token]\n  (reader-error\n   rdr\n   \"Invalid unicode character \\\\\"\n   token\n   \".\"))\n\n(defn throw-invalid-unicode-digit-in-token[rdr ch token]\n  (illegal-arg-error\n   rdr\n   \"Invalid digit \"\n   ch\n   \" in unicode character \\\\\"\n   token\n   \".\"))\n\n(defn throw-invalid-unicode-digit[rdr ch]\n  (illegal-arg-error\n   rdr\n   \"Invalid digit \"\n   ch\n   \" in unicode character.\"))\n\n(defn throw-invalid-unicode-len[rdr actual expected]\n  (illegal-arg-error\n   rdr\n   \"Invalid unicode literal. Unicode literals should be \"\n   expected\n   \"characters long.  \"\n   \"value suppled is \"\n   actual\n   \"characters long.\"))\n\n(defn throw-invalid-character-literal[rdr token]\n  (reader-error rdr \"Invalid character literal \\\\u\" token \".\"))\n\n(defn throw-invalid-octal-len[rdr token]\n  (reader-error\n   rdr\n   \"Invalid octal escape sequence in a character literal:\"\n   token\n   \". Octal escape sequences must be 3 or fewer digits.\"))\n\n(defn throw-bad-octal-number [rdr]\n  (reader-error rdr \"Octal escape sequence must be in range [0, 377].\"))\n\n(defn throw-unsupported-character[rdr token]\n  (reader-error\n   rdr\n   \"Unsupported character: \"\n   token\n   \".\"))\n\n(defn throw-eof-in-character [rdr]\n  (eof-error\n   rdr\n   \"Unexpected EOF while reading character.\"))\n\n(defn throw-bad-escape-char [rdr ch]\n  (reader-error rdr \"Unsupported escape character: \\\\\" ch \".\"))\n\n(defn throw-single-colon [rdr]\n  (reader-error rdr \"A single colon is not a valid keyword.\"))\n\n(defn throw-bad-metadata [rdr x]\n  (reader-error\n   rdr\n   \"Metadata cannot be \"\n   (i/inspect x)\n   \". Metadata must be a Symbol, Keyword, String or Map.\"))\n\n(defn throw-bad-metadata-target [rdr target]\n  (reader-error\n   rdr\n   \"Metadata can not be applied to \"\n   (i/inspect target)\n   \". \"\n   \"Metadata can only be applied to IMetas.\"))\n\n(defn throw-feature-not-keyword [rdr feature]\n  (reader-error\n   rdr\n   \"Feature cannot be \"\n   (i/inspect feature)\n   \" Features must be keywords.\"))\n\n(defn throw-ns-map-no-map [rdr ns-name]\n  (reader-error rdr \"Namespaced map with namespace \" ns-name \" does not specify a map.\"))\n\n(defn throw-bad-ns [rdr ns-name]\n  (reader-error rdr \"Invalid value used as namespace in namespaced map: \" ns-name \".\"))\n\n(defn throw-bad-reader-tag [rdr tag]\n  (reader-error\n   rdr\n   \"Invalid reader tag: \"\n   (i/inspect tag)\n   \". Reader tags must be symbols.\"))\n\n(defn throw-unknown-reader-tag [rdr tag]\n  (reader-error\n   rdr\n   \"No reader function for tag \"\n   (i/inspect tag)\n   \".\"))\n\n(defn- duplicate-keys-error [msg coll]\n  (letfn [(duplicates [seq]\n            (for [[id freq] (frequencies seq)\n                  :when (> freq 1)]\n              id))]\n    (let [dups (duplicates coll)]\n      (apply str msg\n             (when (> (count dups) 1) \"s\")\n             \": \" (interpose \", \" dups)))))\n\n(defn throw-dup-keys [rdr kind ks]\n  (reader-error\n   rdr\n   (duplicate-keys-error\n    (str (s/capitalize (name kind)) \" literal contains duplicate key\")\n    ks)))\n\n(defn throw-eof-error [rdr line]\n  (if line\n    (eof-error rdr \"EOF while reading, starting at line \" line \".\")\n    (eof-error rdr \"EOF while reading.\")))\n"]}