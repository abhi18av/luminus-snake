{"version":3,"file":"clojure.data.js","sources":["clojure/data.cljs"],"mappings":"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","names":["cljs.core/vector?","b","cljs.core/vec","cljs.core/not-empty","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","a","x__4211__auto__","m__4212__auto__","clojure/data.equality-partition","goog/typeOf","cljs.core/missing-protocol","clojure.data/EqualityPartition","clojure.data/atom-diff","ks","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","clojure.data/diff-associative-key","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","x","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","diff1","diff2","in-b","cljs.core/contains?","k","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ISequential","cljs.core/IMap","var_args","G__27875","clojure.data/diff-associative","js/Error","G__27991","clojure.data/diff-similar","fexpr__27990","cljs.core/Keyword","clojure.data/equality-partition","clojure.data/diff-sequential","same","in-a","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.data/vectorize","goog.object/set","clojure.data/Diff","G__27956","G__27957","G__27958","G__27962","G__27963","G__27964","G__27965","G__27966","G__27967","G__27968","G__27969","G__27970","G__27971","G__27972","G__27973","G__27977","G__27978","G__27979","G__27980","G__27981","G__27982","clojure.data/diff","vb","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ab","a*","cljs.core/max","m","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","b*","v","result","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__27854","vec__27855","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core/count","x__4006__auto__","y__4007__auto__","vec__27859","va","G__27893","G__27894","G__27895","G__27896","G__27897","G__27898","G__27899","G__27900","G__27901","G__27902","G__27903","G__27904","G__27905","G__27906","G__27907","G__27908","G__27909","G__27910","G__27911","G__27912","G__27913","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.data/diff-set","clojure/data.diff-similar","cljs.core/seq","cljs.core/ISet"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns \n  ^{:author \"Stuart Halloway\",\n    :doc \"Non-core data functions.\"}\n  clojure.data\n  (:require [clojure.set :as set]))\n\n(declare diff)\n\n(defn- atom-diff\n  \"Internal helper for diff.\"\n  [a b]\n  (if (= a b) [nil nil a] [a b nil]))\n\n;; for big things a sparse vector class would be better\n(defn- vectorize\n  \"Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys\"\n  [m]\n  (when (seq m)\n    (reduce\n     (fn [result [k v]] (assoc result k v))\n     (vec (repeat (apply max (keys m))  nil))\n     m)))\n\n(defn- diff-associative-key\n  \"Diff associative things a and b, comparing only the key k.\"\n  [a b k]\n  (let [va (get a k)\n        vb (get b k)\n        [a* b* ab] (diff va vb)\n        in-a (contains? a k)\n        in-b (contains? b k)\n        same (and in-a in-b\n                  (or (not (nil? ab))\n                      (and (nil? va) (nil? vb))))]\n    [(when (and in-a (or (not (nil? a*)) (not same))) {k a*})\n     (when (and in-b (or (not (nil? b*)) (not same))) {k b*})\n     (when same {k ab})\n     ]))\n\n(defn- diff-associative\n  \"Diff associative things a and b, comparing only keys in ks (if supplied).\"\n  ([a b]\n     (diff-associative a b (set/union (keys a) (keys b))))\n  ([a b ks]\n     (reduce\n      (fn [diff1 diff2]\n        (doall (map merge diff1 diff2)))\n      [nil nil nil]\n      (map\n       (partial diff-associative-key a b)\n       ks))))\n\n(defn- diff-sequential\n  [a b]\n  (vec (map vectorize (diff-associative\n                       (if (vector? a) a (vec a))\n                       (if (vector? b) b (vec b))\n                       (range (max (count a) (count b)))))))\n\n(defn- diff-set\n  [a b]\n  [(not-empty (set/difference a b))\n   (not-empty (set/difference b a))\n   (not-empty (set/intersection a b))])\n\n(defprotocol EqualityPartition\n  \"Implementation detail. Subject to change.\"\n  (equality-partition [x] \"Implementation detail. Subject to change.\"))\n\n(defprotocol Diff\n  \"Implementation detail. Subject to change.\"\n  (diff-similar [a b] \"Implementation detail. Subject to change.\"))\n\n(extend-protocol EqualityPartition\n  nil\n  (equality-partition [x] :atom)\n\n  string\n  (equality-partition [x] :atom)\n\n  number\n  (equality-partition [x] :atom)\n\n  array\n  (equality-partition [x] :sequential)\n\n  function\n  (equality-partition [x] :atom)\n\n  boolean\n  (equality-partition [x] :atom)\n\n  default\n  (equality-partition [x]\n    (cond\n     (satisfies? IMap x) :map\n     (satisfies? ISet x) :set\n     (satisfies? ISequential x) :sequential\n     :default :atom)))\n\n(extend-protocol Diff\n  nil\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  string\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  number\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  array\n  (diff-similar [a b]\n    (diff-sequential a b))\n\n  function\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  boolean\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  default\n  (diff-similar [a b]\n    ((case (equality-partition a)\n       :atom atom-diff\n       :set diff-set\n       :sequential diff-sequential\n       :map diff-associative)\n     a b)))\n\n(defn diff\n  \"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.\"\n  [a b]\n  (if (= a b)\n    [nil nil a]\n    (if (= (equality-partition a) (equality-partition b))\n      (diff-similar a b)\n      (atom-diff a b))))\n  \n"]}