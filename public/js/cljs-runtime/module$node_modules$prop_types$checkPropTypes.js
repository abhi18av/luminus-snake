shadow$provide.module$node_modules$prop_types$checkPropTypes=function(h,F,f,q,z){function c(c,f,h,q,z){for(var qa in c)if(ya(c,qa)){try{if("function"!==typeof c[qa]){var F=Error((q||"React class")+": "+h+" type `"+qa+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof c[qa]+"`.");F.name="Invariant Violation";throw F;}var T=c[qa](f,qa,q,h,null,u)}catch(ma){T=ma}!T||T instanceof Error||H((q||"React class")+": type specification of "+h+" `"+qa+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+
typeof T+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");if(T instanceof Error&&!(T.message in C)){C[T.message]=!0;var S=z?z():"";H("Failed "+h+" type: "+T.message+(null!=S?S:""))}}}var H=function(){},u=f("module$node_modules$prop_types$lib$ReactPropTypesSecret"),C={},ya=Function.call.bind(Object.prototype.hasOwnProperty);H=function(c){c="Warning: "+c;"undefined"!==typeof console&&console.error(c);
try{throw Error(c);}catch(ka){}};c.resetWarningCache=function(){C={}};q.exports=c}
//# sourceMappingURL=module$node_modules$prop_types$checkPropTypes.js.map
