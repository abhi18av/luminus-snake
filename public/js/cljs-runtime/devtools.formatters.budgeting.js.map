{"version":3,"file":"devtools.formatters.budgeting.js","sources":["devtools/formatters/budgeting.cljs"],"mappings":"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","names":["seq__29797","cljs.core/seq","chunk__29798","count__29799","i__29800","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","item","json-ml","new-depth-budget","depth-budget","js/Error","devtools.formatters.budgeting/distribute-budget!","expander-ml","devtools.formatters.budgeting/has-over-budget-value?","value","cljs.core/volatile?","devtools.formatters.budgeting/over-budget-values","o__27689__auto__","_","cljs.core/object?","data","devtools.formatters.budgeting/add-over-budget-value!","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","devtools.formatters.budgeting/has-any-object-reference?","temp__5455__auto__","initial-hierarchy-depth-budget","devtools.formatters.helpers/pref","cljs.core/second","object-reference","devtools.formatters.budgeting/object-reference?","cljs.core/some","config","cljs.core/deref","cljs.core/contains?","devtools.formatters.budgeting/determine-depth","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/array?","cljs.core/vreset!","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","devtools.formatters.budgeting/transfer-remaining-depth-budget!","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","remaining-depth-budget","needed-depth","devtools.formatters.budgeting/alter-json-ml-to-fit-in-remaining-budget!","js/WeakSet","cljs.core/volatile!","G__29796","target__27694__auto__","devtools.formatters.state/set-depth-budget","devtools.formatters.budgeting/header-expander-depth-cost","or__3922__auto__","devtools.formatters.state/get-depth-budget","devtools.formatters.budgeting/delete-over-budget-value!","final?","depth","devtools.formatters.budgeting/was-over-budget?!","cljs.core/not","devtools.formatters.templating/render-markup","devtools.formatters.markup/<header-expander>"],"sourcesContent":["(ns devtools.formatters.budgeting\n  (:require-macros [devtools.oops :refer [oget oset ocall]])\n  (:require [devtools.formatters.templating :refer [render-markup]]\n            [devtools.formatters.state :refer [get-depth-budget set-depth-budget]]\n            [devtools.formatters.helpers :refer [pref]]\n            [devtools.formatters.markup :refer [<header-expander>]]))\n\n; This functionality provides a workaround to issue #22 (https://github.com/binaryage/cljs-devtools/issues/22).\n; The idea is to track hierarchy depth for json-ml(s) we are generating.\n; If we are about to cross the depth limit hardcoded in WebKit,\n; instead we render simple expandable placeholders which resume full rendering in their bodies (when expanded by user).\n; Note that this technique has some quirks, it may break styling in some pathological cases.\n\n; we need to reserve some depth levels for our expander symbol markup\n(def header-expander-depth-cost 2)\n\n; -- tracking over-budget values  -------------------------------------------------------------------------------------------\n\n; note: phantomjs does not have WeakSet, so we have to emulate it when testing\n(def over-budget-values (if (exists? js/WeakSet) (js/WeakSet.) (volatile! #{})))\n\n(defn add-over-budget-value! [value]\n  (if (volatile? over-budget-values)\n    (vreset! over-budget-values (conj @over-budget-values value))\n    (ocall over-budget-values \"add\" value)))\n\n(defn delete-over-budget-value! [value]\n  (if (volatile? over-budget-values)\n    (vreset! over-budget-values (disj @over-budget-values value))\n    (ocall over-budget-values \"delete\" value)))\n\n(defn has-over-budget-value? [value]\n  (if (volatile? over-budget-values)\n    (contains? @over-budget-values value)\n    (ocall over-budget-values \"has\" value)))\n\n; -- depth budget accounting ------------------------------------------------------------------------------------------------\n\n(defn object-reference? [json-ml]\n  (= (first json-ml) \"object\"))\n\n(defn determine-depth [json-ml]\n  (if (array? json-ml)\n    (inc (apply max (map determine-depth json-ml)))\n    0))\n\n(defn has-any-object-reference? [json-ml]\n  (if (array? json-ml)\n    (if (object-reference? json-ml)\n      true\n      (some has-any-object-reference? json-ml))))\n\n(defn transfer-remaining-depth-budget! [object-reference depth-budget]\n  {:pre [(not (neg? depth-budget))]}\n  (let [data (second object-reference)\n        _ (assert (object? data))\n        config (oget data \"config\")]\n    (oset data [\"config\"] (set-depth-budget config depth-budget))))\n\n(defn distribute-budget! [json-ml depth-budget]\n  {:pre [(not (neg? depth-budget))]}\n  (if (array? json-ml)\n    (let [new-depth-budget (dec depth-budget)]\n      (if (object-reference? json-ml)\n        (transfer-remaining-depth-budget! json-ml new-depth-budget)\n        (doseq [item json-ml]\n          (distribute-budget! item new-depth-budget)))))\n  json-ml)\n\n; -- api --------------------------------------------------------------------------------------------------------------------\n\n(defn was-over-budget?! [value]\n  (when (has-over-budget-value? value)\n    (delete-over-budget-value! value)\n    true))\n\n(defn alter-json-ml-to-fit-in-remaining-budget! [value json-ml]\n  (if-let [initial-hierarchy-depth-budget (pref :initial-hierarchy-depth-budget)]                                             ; this is hardcoded in InjectedScriptSource.js in WebKit, look for maxCustomPreviewRecursionDepth\n    (let [remaining-depth-budget (or (get-depth-budget) (dec initial-hierarchy-depth-budget))\n          depth (determine-depth json-ml)\n          final? (not (has-any-object-reference? json-ml))\n          needed-depth (if final? depth (+ depth header-expander-depth-cost))]\n      (if (>= remaining-depth-budget needed-depth)\n        (distribute-budget! json-ml remaining-depth-budget)\n        (let [expander-ml (render-markup (<header-expander> value))]\n          (add-over-budget-value! value)                                                                                      ; we need to record over-budget values to for later was-over-budget?! check, see has-body* in formatters.core\n          expander-ml)))\n    json-ml))\n"]}