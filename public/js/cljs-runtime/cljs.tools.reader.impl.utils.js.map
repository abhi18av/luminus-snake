{"version":3,"file":"cljs.tools.reader.impl.utils.js","sources":["cljs/tools/reader/impl/utils.cljs"],"mappings":"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","names":["f","cljs.tools.reader.impl.utils/next-id","c","->key","ns","key-name","cljs.tools.reader.impl.utils/last-id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","key-ns","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","ch","p__30184","vec__30185","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.impl.utils/second'","a","b","goog.string/isNumeric","key","x","cljs.tools.reader.impl.utils/ws-rx","G__30140","cljs.tools.reader.impl.utils/numeric?","this__12143__auto__","k__12144__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__12145__auto__","k30136","else__12146__auto__","cljs.core/Keyword","splicing?","form","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__12157__auto__","writer__12158__auto__","opts__12159__auto__","pr-pair__12160__auto__","keyval__12161__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__30135","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__12141__auto__","__meta","this__12138__auto__","__hash","this__12147__auto__","cljs.core/count","this__12139__auto__","h__4030__auto__","fexpr__30141","coll__12140__auto__","cljs.core/hash-unordered-coll","this30137","other30138","this__12152__auto__","k__12153__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__12150__auto__","k__12151__auto__","pred__30144","cljs.core/keyword-identical?","expr__30145","G__30147","G__30148","G__30149","G__30150","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__12155__auto__","cljs.core/seq","this__12142__auto__","this__12148__auto__","entry__12149__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","cljs.tools.reader.impl.utils/ReaderConditional","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__30139","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.impl.utils/->ReaderConditional","cljs.tools.reader.impl.utils/map->ReaderConditional","cljs.tools.reader.impl.utils/newline?","coll","writer","opts","cljs.tools.reader.impl.utils/reader-conditional","value","cljs.core/PROTOCOL_SENTINEL","cljs.tools.reader.impl.utils/reader-conditional?","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","vec__30161","vec__30176","cljs.core/name","fexpr__30164","fexpr__30179","cljs.core/namespace","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs/core.ExceptionInfo","ex","cljs.core/Symbol","cljs.core/symbol","cljs.core/keyword","cljs.tools.reader.impl.utils/char","cljs.tools.reader.impl.utils/namespace-keys","keys","cljs.core/char","iter__4292__auto__","s__30158","cljs.core/LazySeq","temp__5457__auto__","cljs.core/chunked-seq?","c__4290__auto__","size__4291__auto__","b__30160","cljs.core/chunk-buffer","i__30159","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30157","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/chunk-first","cljs.tools.reader.impl.utils/ex-info?","cljs.tools.reader.impl.utils/whitespace?","cljs.tools.reader.impl.utils/desugar-meta"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.utils\n  (:refer-clojure :exclude [char])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]))\n\n(defn char [x]\n  (when-not (nil? x)\n    (cljs.core/char x)))\n\n(defn ^boolean ex-info? [ex]\n  (instance? cljs.core.ExceptionInfo ex))\n\n(defrecord ReaderConditional [splicing? form])\n\n(defn ^boolean reader-conditional?\n  \"Return true if the value is the data representation of a reader conditional\"\n  [value]\n  (instance? ReaderConditional value))\n\n(defn reader-conditional\n  \"Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing.\"\n  [form splicing?]\n  (ReaderConditional. splicing? form))\n\n(extend-protocol IPrintWithWriter\n  ReaderConditional\n  (-pr-writer [coll writer opts]\n    (-write writer (str \"#?\" (when (:splicing? coll) \"@\")))\n    (pr-writer (:form coll) writer opts)))\n\n(def ws-rx #\"[\\s]\")\n\n(defn ^boolean whitespace?\n  \"Checks whether a given character is whitespace\"\n  [ch]\n  (when-not (nil? ch)\n    (if (identical? ch \\,)\n      true\n      (.test ws-rx ch))))\n\n(defn ^boolean numeric?\n  \"Checks whether a given character is numeric\"\n  [ch]\n  (when-not (nil? ch)\n    (gstring/isNumeric ch)))\n\n(defn ^boolean newline?\n  \"Checks whether the character is a newline\"\n  [c]\n  (or (identical? \\newline c)\n      (identical? \"\\n\" c)\n      (nil? c)))\n\n(defn desugar-meta\n  \"Resolves syntactical sugar in metadata\" ;; could be combined with some other desugar?\n  [f]\n  (cond\n    (keyword? f) {f true}\n    (symbol? f)  {:tag f}\n    (string? f)  {:tag f}\n    :else        f))\n\n(def last-id (atom 0))\n\n(defn next-id\n  []\n  (swap! last-id inc))\n\n(defn namespace-keys [ns keys]\n  (for [key keys]\n    (if (or (symbol? key)\n            (keyword? key))\n      (let [[key-ns key-name] ((juxt namespace name) key)\n            ->key (if (symbol? key) symbol keyword)]\n        (cond\n          (nil? key-ns)\n          (->key ns key-name)\n\n          (= \"_\" key-ns)\n          (->key key-name)\n\n          :else\n          key))\n      key)))\n\n(defn second' [[a b]]\n  (when-not a b))\n"]}