{"version":3,"file":"snake.core.js","sources":["snake/core.cljs"],"mappings":"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","names":["snake.core/state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","goog.dom/getElement","p__27485","p__27486","vec__27487","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__27490","snake.core/add-coordinates","x1","y1","x2","y2","cljs.test/test-var","the-var__12224__auto__","snake.core/add-coordinates-test","shadow.test.env/register-test","values__11811__auto__","cljs.core/List","result__11812__auto__","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.test/do-report","cljs.core/cons","t__11856__auto__","e27493","cljs.core/=","p__27495","p__27496","vec__27497","vec__27500","snake.core/coordinates-equal?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","snake.core/coordinates-equal?-test","e27503","p__27505","vec__27506","snake.core/draw","x","y","color","map__27509","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","ctx","cljs.core.get.cljs$core$IFn$_invoke$arity$2","width","height","border","cljs.core/deref","snake.core/draw-test","e27511","snake.core/resize-canvas","map__27513","element","snake.core/resize-canvas-test","e27515","snake.core/keycode->direction","keycode","cljs.core.get.cljs$core$IFn$_invoke$arity$3","goog/events.KeyCodes.UP","goog/events.KeyCodes.DOWN","goog/events.KeyCodes.LEFT","goog/events.KeyCodes.RIGHT","snake.core/keycode->direction-test","e27517","snake.core/opposite-direction?","dir1","dir2","snake.core/on-keydown","event","map__27519","direction","new-direction","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","p__27521","vec__27522","snake.core/out-of-boundary?","max-x","max-y","p__27526","vec__27527","snake.core/self-collission?","map__27530","body","p1__27525#","cljs.core/some","p__27532","vec__27533","snake.core/eat-food?","map__27536","food","snake.core/generate-food","map__27538","food-color","cljs.core/rand-int","cljs.core/not","snake.core/game-loop","map__27541","background-color","body-color","head","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","tail","cljs.core/last","js/alert","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","js/window.setTimeout","snake.core/init","goog.events/removeAll","js/document","goog.events/listen","goog/events.EventType.KEYDOWN","snake.core/app","snake.core/main","reagent.core.render.cljs$core$IFn$_invoke$arity$2","cljs.test/run-block","env27543","cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0","summary27544","cljs.core/volatile!","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.test/set-env!","cljs.test/block","env__11924__auto__","cljs.test/get-current-env","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.test/test-vars-block","cljs.test/clear-env!","cljs.core/-vreset!","G__27546","cljs.core/-deref","G__27547","cljs.test/get-and-clear-env!","fexpr__27545","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/merge-with","cljs.core/+","G__27548","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.test/report"],"sourcesContent":["(ns snake.core\n  (:require [reagent.core :as r]\n            [goog.dom :as dom]\n            [goog.events.EventType]\n            [goog.events :as events]\n            [goog.events.KeyCodes]\n            [clojure.test :as t]))\n\n\n(def state\n  (atom {;; canvas object\n         :canvas/element  (dom/getElement \"canvas\")\n         :canvas/ctx      (-> (dom/getElement \"canvas\") (.getContext \"2d\"))\n         :canvas/background-color \"white\" ; default canvas color (background)\n         :canvas/width  640\n         :canvas/height 480\n         ;; snake object\n         :snake/body '([0 0] [1 0] [2 0]) ; [x y]\n         :snake/direction [0 1]           ; default direction, see `keycode->direction`\n         :snake/width  32                 ; 640 / 20\n         :snake/height 24                 ; 480 / 20\n         :snake/border 2                  ; border size\n         :snake/body-color \"lime\"         ; snake's body color\n         :snake/alive true                ; when `false`, stop game loop\n         ;; snake food\n         :snake/food nil                  ; when `nil`, regenerate it\n         :snake/food-color \"red\"          ; the color of food\n         }))\n\n\n\n;; ------------------------------\n;; Helper functions\n\n\n(defn add-coordinates [[x1 y1] [x2 y2]]\n  [(+ x1 x2) (+ y1 y2)])\n\n(t/deftest add-coordinates-test\n  (t/is\n    (= [4 6] (add-coordinates [1 2] [3 4]) )))\n\n\n(defn coordinates-equal? [[x1 y1] [x2 y2]]\n  (and (= x1 x2) (= y1 y2)))\n\n(t/deftest coordinates-equal?-test\n  (t/is\n   (= false (coordinates-equal? [1 2] [3 4]) )))\n\n\n;; -----------------------------\n;; Canvas functions\n\n(defn draw\n  \"Draw the point on canvas according to snake's width/height.\"\n  [[x y] color]\n  (let [{:keys [:canvas/ctx :snake/width :snake/height :snake/border]} (deref state )]\n    (set! (.-fillStyle ctx) color)\n    (.fillRect  ctx\n                (* x width)\n                (* y height)\n                (- width border)\n                (- height border))))\n\n\n;; call in browser console\n;; snake.core.draw([2,1], \"green\")\n(t/deftest draw-test\n\n; (t/is\n;  (= [32 24 30 22]\n;   (draw [1 1] \"green\")))\n\n (t/is\n  (= \"green\"\n    (.-fillStyle (:canvas/ctx @state)))))\n\n\n\n\n(defn resize-canvas\n  \"Resize the canvas according to state.\"\n  []\n  (let [{:keys [:canvas/element :canvas/width :canvas/height]} @state]\n    (.setAttribute element \"width\"  width)\n    (.setAttribute element \"height\" height)))\n\n;; call in browser console\n;; snake.core.resize_canvas()\n(t/deftest resize-canvas-test\n (t/is\n  (= 640 (.-width (dom/getElement \"canvas\")))))\n\n\n\n;; ------------------------------\n;; Game functions\n\n(defn keycode->direction\n  \"Convert javascript's keycode to direction array.\"\n  [keycode]\n  (get {goog.events.KeyCodes.UP    [0 -1]  ; code: 38\n        goog.events.KeyCodes.DOWN  [0  1]  ; code: 40\n        goog.events.KeyCodes.LEFT  [-1 0] ; code: 37\n        goog.events.KeyCodes.RIGHT [1 0]} ; code: 39\n       keycode nil))\n\n(t/deftest keycode->direction-test\n  (t/is\n    (= [1 0] (keycode->direction 39))))\n\n\n(defn opposite-direction?\n  \"Detect two direction array are opposite direction or not.\"\n  [dir1 dir2]\n  (= [0 0] (add-coordinates dir1 dir2)))\n\n(defn on-keydown\n  \"The keydown event handler.\"\n  [event]\n  (let [{:keys [:snake/direction]} @state\n        new-direction (keycode->direction (.-keyCode event))]\n    ;; We only handle direction exist condition\n    (when new-direction\n      ;; When two direction are not opposite direction, save new direction\n      (when-not (opposite-direction? new-direction direction)\n        (swap! state assoc-in [:snake/direction] new-direction)))))\n\n(defn out-of-boundary?\n  \"Check if axis is exceed the game board boundary.\"\n  [[x y]]\n  (let [max-x (/ (:canvas/width @state)  (:snake/width @state))\n        max-y (/ (:canvas/height @state) (:snake/height @state))]\n    (or (>= y max-y) (< y 0) (>= x max-x) (< x 0))))\n\n(defn self-collission?\n  \"Check if axis is collision with snake's body.\"\n  [[x y]]\n  (let [{:keys [:snake/body]} @state]\n    (some #(coordinates-equal? [x y] %) body)))\n\n(defn eat-food?\n  \"Check if axis is equal the food's axis.\"\n  [[x y]]\n  (let [{:keys [:snake/food]} @state]\n    (coordinates-equal? [x y] food)))\n\n(defn generate-food\n  \"Generate the food on a random coordinate.\"\n  []\n  (let [{:keys [:snake/body :snake/food :snake/food-color]} @state\n        max-x (/ (:canvas/width @state)  (:snake/width @state))\n        max-y (/ (:canvas/height @state) (:snake/height @state))]\n    ;; skip when current food exist\n    (when (nil? food)\n      ;; generate food axis\n      (loop [food [(rand-int max-x) (rand-int max-y)]]\n        (if-not (self-collission? food)\n          (do\n            (swap! state assoc-in [:snake/food] food)\n            (draw food food-color)\n            food)\n          (recur [(rand-int max-x) (rand-int max-y)]))))))\n\n(defn game-loop\n  \"The main game-loop.\"\n  []\n  (let [{:keys [:canvas/background-color :snake/body :snake/body-color :snake/direction]}  @state\n        head (add-coordinates (nth body 0) direction)\n        tail (last body)]\n\n    ;; Every time we enter the game-loop, check if we need to generate new food or not\n    (generate-food)\n\n    ;; Detect if snake collided with it's own body\n    (when (self-collission? head)\n      (js/alert (str \"Snake is collission with itself at : \" head))\n      (swap! state assoc-in [:snake/alive] false))\n\n    ;; Detect if snake exceeded the boundary\n    (when (out-of-boundary? head)\n      (js/alert (str \"Snake is out of boundary at :\" head))\n      (swap! state assoc-in [:snake/alive] false))\n\n    ;; When snake is alive, draw the snake and switch next game-loop\n    (when (:snake/alive @state)\n      ;; Draw head\n      (draw  head body-color)\n      ;; Detect if food eat by snake or not\n      (if (eat-food? head)\n        ;; When food was eaten by snake, just increase it's head and not remove tail\n        (swap! state assoc\n               :snake/food nil\n               :snake/body (conj body head))\n        (do\n          ;; Remove tail by draw canvas's background-color\n          (draw  tail background-color)\n          ;; Add head and remove tail\n          (swap! state assoc-in [:snake/body] (-> (conj body head) drop-last))))\n\n      ;; next move, you can modify the `150` to change different speed\n      (js/window.setTimeout (fn [] (game-loop)) 150))))\n\n\n;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;\n\n;; start is called by init after code reloading finishes\n\n(defn init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n ;; Resize canvas object\n (resize-canvas)\n  ;; Remove all listen events\n (events/removeAll js/document)\n  ;; Register event listener `on-keydown` event\n (events/listen js/document goog.events.EventType.KEYDOWN on-keydown)\n  ;; Start the game loop\n (game-loop))\n\n;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;\n\n(defn app\n  []\n  init)\n\n(defn ^:export main\n  []\n  (r/render\n    [app]\n    (.getElementById js/document \"app\")))\n\n\n\n;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;\n\n\n;; NOTE run all tests on browser\n\n\n(t/run-tests)\n"]}