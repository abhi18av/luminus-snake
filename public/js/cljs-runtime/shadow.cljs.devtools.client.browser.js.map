{"version":3,"file":"shadow.cljs.devtools.client.browser.js","sources":["shadow/cljs/devtools/client/browser.cljs"],"mappings":"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","names":["cljs.core/vreset!","shadow.cljs.devtools.client.browser/socket-ref","shadow.cljs.devtools.client.browser/close-reason-ref","shadow.cljs.devtools.client.env/build-id","fn-sym","shadow.cljs.devtools.client.browser/load-sources","shadow.cljs.devtools.client.browser.devtools_msg.cljs$core$IFn$_invoke$arity$variadic","resource-name","shadow.cljs.devtools.client.browser/devtools-msg","path","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/repl-host","shadow.cljs.devtools.client.env/repl-port","shadow.cljs.devtools.client.env/proc-id","js/setTimeout","shadow.cljs.devtools.client.browser/heartbeat!","js/console.error","e","sources","socket","cljs.core/empty?","warnings","shadow.cljs.devtools.client.env/ignore-warnings","shadow.cljs.devtools.client.hud/hud-error","msg","shadow.cljs.devtools.client.browser/do-js-load","cljs.core/reset!","shadow.cljs.devtools.client.browser/repl-ns-ref","ns","shadow.cljs.devtools.client.browser/ws-msg","id","require-str","js-ns","p__36701","map__36702","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/handle-asset-watch","updates","shadow.cljs.devtools.client.browser/module-loaded","name","s","cljs.core.into.cljs$core$IFn$_invoke$arity$2","js/SHADOW_ENV.setLoaded","output-name","goog.userAgent.product/FIREFOX","goog.dom/insertSiblingAfter","new-link","node","seq__36580","cljs.core/seq","chunk__36581","count__36582","i__36583","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","js-requires","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/Date.now","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","repl-state","or__3922__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/goog-base-rc","resource-id","cljs.core/not","sources-to-get","clojure.string/ends-with?","cljs.core/some","reload-namespaces","provides","cljs.core/volatile!","seq__36633","chunk__36634","count__36635","i__36636","map__36637","map__36639","line","column","w","req","goog.userAgent.product/IE","G__36606","G__36607","G__36608","G__36609","G__36610","goog.net.XhrIo/send","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/src-is-loaded?","src","callback","actions","cljs.core/contains?","reload-info","shadow.cljs.devtools.client.env/set-print-fns!","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/deref","shadow.cljs.devtools.client.browser/active-modules-ref","G__36765","shadow.cljs.devtools.client.browser/repl-invoke","module","shadow.cljs.devtools.client.browser/repl-init","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","G__36768","G__36769","G__36770","G__36771","G__36772","js/WebSocket","ws-url","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","js/console.warn","p__36644","map__36645","p__36641","map__36642","goog.userAgent.product/CHROME","sources-to-load","p__36745","map__36746","js","p__36762","map__36763","shadow.cljs.devtools.client.browser/handle-message","type","shadow.cljs.devtools.client.hud/hud-warnings","G__36604","map__36621","compiled","loc","cbp","seq__36559","chunk__36560","count__36561","i__36562","map__36563","map__36565","shadow.cljs.devtools.client.browser/scripts-to-load","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/Keyword","text","info","p__36756","map__36757","shadow.cljs.devtools.client.browser/get-asset-root","shadow.cljs.devtools.client.browser/ws-connect","shadow.cljs.devtools.client.browser/repl-error","result","cljs.core/*print-fn*","shadow.cljs.devtools.client.hud/load-end-success","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__36713","G__36717","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","clojure.string/replace","content","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/autoload","p__36556","map__36557","temp__5455__auto__","p1__36614#","shadow.cljs.devtools.client.browser/do-js-reload","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.env/files-url","shadow.cljs.devtools.client.browser/module-is-active?","shadow.cljs.devtools.client.browser/script-eval","shadow.cljs.devtools.client.env/module-format","shadow.cljs.devtools.client.env/repl-error","shadow.cljs.devtools.client.browser/compile","seq__36705","chunk__36707","count__36708","i__36709","shadow.cljs.devtools.client.browser/repl-set-ns","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","seq36546","G__36547","self__4486__auto__","args","goog.dom/removeNode","js/goog","js/goog.constructNamespace_","p__36759","map__36760","shadow.cljs.devtools.client.env/ws-url","complete-fn","p__36615","map__36616","shadow.cljs.devtools.client.browser/handle-build-complete","shadow.cljs.devtools.client.browser/goog-is-loaded?","js/goog.Uri","js/CLOSURE_BASE_PATH","js/document.querySelector","shadow.cljs.devtools.client.env/enabled","shadow.cljs.devtools.client.browser/loaded?","js/goog.isProvided_","print-fn","p__36751","map__36752","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","warning","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.hud/connection-error","iter__4292__auto__","s__36624","cljs.core/LazySeq","xs__6012__auto__","map__36629","iterys__4288__auto__","s__36626","c__4290__auto__","size__4291__auto__","b__36628","cljs.core/chunk-buffer","i__36627","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36625","cljs.core/cons","cljs.core/rest","fs__4289__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__36623","js/document.location.href","shadow.cljs.devtools.client.browser/repl-require","shadow.cljs.devtools.client.hud/load-start","res","shadow.cljs.devtools.client.hud/hud-hide","js/goog.globalEval","code","shadow.cljs.devtools.client.env/process-ws-msg","p__36647","map__36648","rc","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","js/console","and__3911__auto__","shadow.cljs.devtools.client.hud/connection-error-clear!","shadow.cljs.devtools.client.browser/do-js-requires","js/SHADOW_ENV.isLoaded","goog.userAgent.product/SAFARI","shadow.cljs.devtools.client.browser/get-ua-product","js/document.createElement","shadow.cljs.devtools.client.env/repl-call","js/eval","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","p__36748","map__36749","shadow.cljs.devtools.client.env/before-load-src","js/window.addEventListener"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.dom :as gdom]\n    [goog.object :as gobj]\n    [goog.net.jsloader :as loader]\n    [goog.userAgent.product :as product]\n    [goog.Uri]\n    [goog.net.XhrIo :as xhr]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.cljs.devtools.client.console]\n    [shadow.cljs.devtools.client.hud :as hud]\n    ))\n\n(defonce active-modules-ref\n  (volatile! #{}))\n\n(defonce repl-ns-ref (atom nil))\n\n(defn module-loaded [name]\n  (vswap! active-modules-ref conj (keyword name)))\n\n(defonce socket-ref (volatile! nil))\n\n(defn devtools-msg [msg & args]\n  (.apply (.-log js/console) nil (into-array (into [(str \"%cshadow-cljs: \" msg) \"color: blue;\"] args))))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(defonce scripts-to-load (atom []))\n\n(def loaded? js/goog.isProvided_)\n\n(defn goog-is-loaded? [name]\n  (js/SHADOW_ENV.isLoaded name))\n\n(def goog-base-rc\n  [:shadow.build.classpath/resource \"goog/base.js\"])\n\n(defn src-is-loaded? [{:keys [resource-id output-name] :as src}]\n  ;; FIXME: don't like this special case handling, but goog/base.js will always be loaded\n  ;; but not as a separate file\n  (or (= goog-base-rc resource-id)\n      (goog-is-loaded? output-name)))\n\n(defn module-is-active? [module]\n  (contains? @active-modules-ref module))\n\n(defn script-eval [code]\n  (js/goog.globalEval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id output-name resource-name js] :as src} sources]\n    ;; should really stop using this and rather maintain our own record\n    ;; but without this hot-reload will reload shadow-js files with each cycle\n    ;; since they don't set it\n    (js/SHADOW_ENV.setLoaded output-name)\n\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn))\n\n(defn do-js-requires\n  \"when (require '[\\\"some-str\\\" :as x]) is done at the REPL we need to manually call the shadow.js.require for it\n   since the file only adds the shadow$provide. only need to do this for shadow-js.\"\n  [js-requires]\n  (doseq [js-ns js-requires]\n    (let [require-str (str \"var \" js-ns \" = shadow.js.require(\\\"\" js-ns \"\\\");\")]\n      (script-eval require-str))))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn handle-build-complete [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (doseq [{:keys [msg line column resource-name] :as w} warnings]\n      (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg)))\n\n    (if-not env/autoload\n      (hud/load-end-success)\n      ;; load all files for current build:\n      ;; of modules that are active\n      ;; and are either not loaded yet\n      ;; or specifically marked for reload\n      (when (or (empty? warnings) env/ignore-warnings)\n        (let [sources-to-get\n              (->> sources\n                   (filter\n                     (fn [{:keys [module] :as rc}]\n                       (or (= \"js\" env/module-format)\n                           (module-is-active? module))))\n                   ;; don't reload namespaces that have ^:dev/never-reload meta\n                   (remove (fn [{:keys [ns]}]\n                             (contains? (:never-load reload-info) ns)))\n                   (filter\n                     (fn [{:keys [ns resource-id] :as src}]\n                       (or (contains? (:always-load reload-info) ns)\n                           (not (src-is-loaded? src))\n                           (and (contains? compiled resource-id)\n                                ;; never reload files from jar\n                                ;; they can't be hot-swapped so the only way they get re-compiled\n                                ;; is if they have warnings, which we can't to anything about\n                                (not (:from-jar src))))))\n                   (into []))]\n\n          (if-not (seq sources-to-get)\n            (hud/load-end-success)\n            (load-sources sources-to-get #(do-js-reload msg % hud/load-end-success))\n            ))))))\n\n(defn handle-asset-watch [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (when-let [node (js/document.querySelector (str \"link[href^=\\\"\" path \"\\\"]\"))]\n      (let [new-link\n            (doto (js/document.createElement \"link\")\n              (.setAttribute \"rel\" \"stylesheet\")\n              (.setAttribute \"href\" (str path \"?r=\" (rand))))]\n\n        (devtools-msg \"load CSS\" path)\n        (gdom/insertSiblingAfter new-link node)\n        (gdom/removeNode node)\n        ))))\n\n;; from https://github.com/clojure/clojurescript/blob/master/src/main/cljs/clojure/browser/repl.cljs\n;; I don't want to pull in all its other dependencies just for this function\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn get-asset-root []\n  (let [loc (js/goog.Uri. js/document.location.href)\n        cbp (js/goog.Uri. js/CLOSURE_BASE_PATH)\n        s (.toString (.resolve loc cbp))]\n    ;; FIXME: stacktrace starts with file:/// but resolve returns file:/\n    ;; how does this look on windows?\n    (str/replace s #\"^file:/\" \"file:///\")\n    ))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" e)\n  (-> (env/repl-error e)\n      (assoc :ua-product (get-ua-product)\n             :asset-root (get-asset-root))))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(js/eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload-namespaces js-requires] :as msg}]\n  (let [sources-to-load\n        (->> sources\n             (remove (fn [{:keys [provides] :as src}]\n                       (and (src-is-loaded? src)\n                            (not (some reload-namespaces provides)))))\n             (into []))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (do-js-load sources)\n        (when (seq js-requires)\n          (do-js-requires js-requires))\n        (ws-msg {:type :repl/require-complete :id id})\n        ))))\n\n(defn repl-init [{:keys [repl-state id]}]\n  (reset! repl-ns-ref (get-in repl-state [:current :ns]))\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL init successful\"))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (reset! repl-ns-ref ns)\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n(def close-reason-ref (volatile! nil))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg}]\n  ;; (js/console.log \"ws-msg\" msg)\n  (case type\n    :asset-watch\n    (handle-asset-watch msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg)\n\n    :build-complete\n    (do (hud/hud-warnings msg)\n        (handle-build-complete msg))\n\n    :build-failure\n    (do (hud/load-end)\n        (hud/hud-error msg))\n\n    :build-init\n    (hud/hud-warnings msg)\n\n    :build-start\n    (do (hud/hud-hide)\n        (hud/load-start))\n\n    :pong\n    nil\n\n    :client/stale\n    (vreset! close-reason-ref \"Stale Client! You are not using the latest compilation output!\")\n\n    :client/no-worker\n    (vreset! close-reason-ref (str \"watch for build \\\"\" env/build-id \"\\\" not running\"))\n\n    ;; default\n    :ignored))\n\n(defn compile [text callback]\n  (xhr/send\n    (str \"http\" (when env/ssl \"s\") \"://\" env/repl-host \":\" env/repl-port \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n    (fn [res]\n      (this-as ^goog req\n        (let [actions\n              (-> req\n                  (.getResponseText)\n                  (reader/read-string))]\n          (when callback\n            (callback actions)))))\n    \"POST\"\n    (pr-str {:input text})\n    #js {\"content-type\" \"application/edn; charset=utf-8\"}))\n\n(defn heartbeat! []\n  (when-let [s @socket-ref]\n    (.send s (pr-str {:type :ping :v (js/Date.now)}))\n    (js/setTimeout heartbeat! 30000)))\n\n\n(defn ws-connect []\n  (let [print-fn\n        cljs.core/*print-fn*\n\n        ws-url\n        (env/ws-url :browser)\n\n        socket\n        (js/WebSocket. ws-url)]\n\n    (vreset! socket-ref socket)\n\n    (set! (.-onmessage socket)\n      (fn [e]\n        (env/process-ws-msg (. e -data) handle-message)\n        ))\n\n    (set! (.-onopen socket)\n      (fn [e]\n        (hud/connection-error-clear!)\n        (vreset! close-reason-ref nil)\n        ;; :module-format :js already patches provide\n        (when (= \"goog\" env/module-format)\n          ;; patch away the already declared exception\n          (set! (.-provide js/goog) js/goog.constructNamespace_))\n\n        (env/set-print-fns! ws-msg)\n\n        (devtools-msg \"WebSocket connected!\")\n        ))\n\n    (set! (.-onclose socket)\n      (fn [e]\n        ;; not a big fan of reconnecting automatically since a disconnect\n        ;; may signal a change of config, safer to just reload the page\n        (devtools-msg \"WebSocket disconnected!\")\n        (hud/connection-error (or @close-reason-ref \"Connection closed!\"))\n        (vreset! socket-ref nil)\n        (env/reset-print-fns!)\n        ))\n\n    (set! (.-onerror socket)\n      (fn [e]\n        (hud/connection-error \"Connection failed!\")\n        (devtools-msg \"websocket error\" e)))\n\n    (js/setTimeout heartbeat! 30000)\n    ))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n\n  ;; for /browser-repl in case the page is reloaded\n  ;; otherwise the browser seems to still have the websocket open\n  ;; when doing the reload\n  (js/window.addEventListener \"beforeunload\"\n    (fn []\n      (when-let [s @socket-ref]\n        (.close s))))\n\n  (ws-connect))\n"]}